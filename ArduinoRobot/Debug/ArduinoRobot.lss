
ArduinoRobot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000019c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b4d  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000749  00000000  00000000  00000db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000360  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e5  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000081  00000000  00000000  00001ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001f4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
////////////////////////////// END VARIABLES DECLARATION //////////////////////////

int main (void){
////////////////////////////// SETUP /////////////////////////////////////////////
	//********** Pins configuration **********
	DDRB	= 0b00000011;																// Set pin direction (1=OUTPUT, 0=INPUT)
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB	= 0b00000000;																// Set pin state :
  aa:	15 b8       	out	0x05, r1	; 5
	DDRC	= 0b00000000;																// - if OUTPUT:	1= HIGH, 		0= LOW
  ac:	17 b8       	out	0x07, r1	; 7
	PORTC	= 0b00000000;																// - if INPUT:	1= Pullup on,	0= Pullup off
  ae:	18 b8       	out	0x08, r1	; 8
	DDRD	= 0b11111111;																//
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	8a b9       	out	0x0a, r24	; 10
	PORTD	= 0b00000000;																//
  b4:	1b b8       	out	0x0b, r1	; 11
	//********************
	
	//********** Services Initialization **********
	initADC();
  b6:	0e 94 6d 00 	call	0xda	; 0xda <initADC>
	//********************
	
	sei();																				// Enable Global Interrupts
  ba:	78 94       	sei
	
////////////////////////////// END SETUP /////////////////////////////////////////
	while(1) {
////////////////////////////// MAIN LOOP /////////////////////////////////////////			
		if (!(PINB & (1 << PINB2))){
  bc:	1a 99       	sbic	0x03, 2	; 3
  be:	03 c0       	rjmp	.+6      	; 0xc6 <main+0x20>
			startADC(ADC5);
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	0e 94 73 00 	call	0xe6	; 0xe6 <startADC>
		}
		//********** ISR flags checks **********
		if (ISR_ADC){
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  ca:	88 23       	and	r24, r24
  cc:	b9 f3       	breq	.-18     	; 0xbc <main+0x16>
			uint16_t ADCValue = 0;
			ADCValue = handleConversion();
  ce:	0e 94 7c 00 	call	0xf8	; 0xf8 <handleConversion>
			PORTD = ADCValue;
  d2:	8b b9       	out	0x0b, r24	; 11
			PORTB = ((ADCValue>>8)|0x04);
  d4:	94 60       	ori	r25, 0x04	; 4
  d6:	95 b9       	out	0x05, r25	; 5
  d8:	f1 cf       	rjmp	.-30     	; 0xbc <main+0x16>

000000da <initADC>:
#include "ADC.h"

////////////////////////////// ADC //////////////////////////////////////////////
//********** Initialize ADC **********
void initADC(){
	ISR_ADC = 0;
  da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
  de:	8f e8       	ldi	r24, 0x8F	; 143
  e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  e4:	08 95       	ret

000000e6 <startADC>:
}
//********************

//********** Start ADC conversion **********
void startADC(uint8_t channel){
	ADMUX = (1 << REFS0) | (channel << MUX0);
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1 << ADSC);
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <handleConversion>:
}
//********************

//********** Handle ADC **********
uint16_t handleConversion(){
	uint16_t result = ADC;
  f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  fc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ISR_ADC = 0;
 100:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	return result;
}
 104:	08 95       	ret

00000106 <__vector_21>:
//********************

//********** ADC ISR **********
ISR(ADC_vect){
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
	ISR_ADC = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
}
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
