
Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000828  000008bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000828  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800102  00800102  000008be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7e  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000766  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a1  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  000029f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000756  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000836  00000000  00000000  00003532  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00003d68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_1>
   8:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_2>
   c:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_3>
  10:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_4>
  14:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_5>
  18:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_6>
  1c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_7>
  20:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_8>
  24:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__vector_9>
  28:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_10>
  2c:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_11>
  30:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_12>
  34:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__vector_13>
  38:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_14>
  3c:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_15>
  40:	0c 94 8d 03 	jmp	0x71a	; 0x71a <__vector_16>
  44:	0c 94 99 03 	jmp	0x732	; 0x732 <__vector_17>
  48:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__vector_18>
  4c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__vector_19>
  50:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_20>
  54:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_21>
  58:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_22>
  5c:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__vector_23>
  60:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__vector_24>
  64:	0c 94 06 04 	jmp	0x80c	; 0x80c <__vector_25>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 33       	cpi	r26, 0x36	; 54
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ed 01 	call	0x3da	; 0x3da <main>
  9e:	0c 94 12 04 	jmp	0x824	; 0x824 <_exit>

000000a2 <setPin>:
	TIMSK1 = (1<<ICIE1) | (1<<OCIE1A);													// Enable Input Capture Interrupt, enable Output Compare A interrupt
}
uint16_t getPulseLength(){
	ISR_TMR1CAPT = 0;
	return inputCaptureTime/2;																// Return the timestamp (/2 due to pre-scaler set to 8)  TODO recalculate the divider
}
  a2:	9e ef       	ldi	r25, 0xFE	; 254
  a4:	98 0f       	add	r25, r24
  a6:	9c 30       	cpi	r25, 0x0C	; 12
  a8:	a8 f4       	brcc	.+42     	; 0xd4 <setPin+0x32>
  aa:	5a b1       	in	r21, 0x0a	; 10
  ac:	26 2f       	mov	r18, r22
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	09 2e       	mov	r0, r25
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <setPin+0x16>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <setPin+0x12>
  bc:	25 2b       	or	r18, r21
  be:	2a b9       	out	0x0a, r18	; 10
  c0:	5b b1       	in	r21, 0x0b	; 11
  c2:	24 2f       	mov	r18, r20
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <setPin+0x2a>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	9a 95       	dec	r25
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <setPin+0x26>
  d0:	25 2b       	or	r18, r21
  d2:	2b b9       	out	0x0b, r18	; 11
  d4:	92 ef       	ldi	r25, 0xF2	; 242
  d6:	98 0f       	add	r25, r24
  d8:	96 30       	cpi	r25, 0x06	; 6
  da:	a8 f4       	brcc	.+42     	; 0x106 <setPin+0x64>
  dc:	54 b1       	in	r21, 0x04	; 4
  de:	26 2f       	mov	r18, r22
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	09 2e       	mov	r0, r25
  e4:	02 c0       	rjmp	.+4      	; 0xea <setPin+0x48>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <setPin+0x44>
  ee:	25 2b       	or	r18, r21
  f0:	24 b9       	out	0x04, r18	; 4
  f2:	5b b1       	in	r21, 0x0b	; 11
  f4:	24 2f       	mov	r18, r20
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <setPin+0x5c>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	9a 95       	dec	r25
 100:	e2 f7       	brpl	.-8      	; 0xfa <setPin+0x58>
 102:	25 2b       	or	r18, r21
 104:	2b b9       	out	0x0b, r18	; 11
 106:	87 51       	subi	r24, 0x17	; 23
 108:	86 30       	cpi	r24, 0x06	; 6
 10a:	98 f4       	brcc	.+38     	; 0x132 <setPin+0x90>
 10c:	97 b1       	in	r25, 0x07	; 7
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	08 2e       	mov	r0, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <setPin+0x76>
 114:	66 0f       	add	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <setPin+0x72>
 11c:	69 2b       	or	r22, r25
 11e:	67 b9       	out	0x07, r22	; 7
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <setPin+0x88>
 126:	44 0f       	add	r20, r20
 128:	55 1f       	adc	r21, r21
 12a:	8a 95       	dec	r24
 12c:	e2 f7       	brpl	.-8      	; 0x126 <setPin+0x84>
 12e:	49 2b       	or	r20, r25
 130:	4b b9       	out	0x0b, r20	; 11
 132:	08 95       	ret

00000134 <initADC>:
 134:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ISR_ADC>
 138:	8f e8       	ldi	r24, 0x8F	; 143
 13a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 13e:	08 95       	ret

00000140 <initErrorPin>:
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	0e 94 51 00 	call	0xa2	; 0xa2 <setPin>
 14c:	08 95       	ret

0000014e <setError>:
 14e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <errorCode>
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	0e 94 51 00 	call	0xa2	; 0xa2 <setPin>
 15e:	08 95       	ret

00000160 <startADC>:
 160:	88 30       	cpi	r24, 0x08	; 8
 162:	a0 f4       	brcc	.+40     	; 0x18c <startADC+0x2c>
 164:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <ISR_ADC>
 168:	99 23       	and	r25, r25
 16a:	21 f0       	breq	.+8      	; 0x174 <startADC+0x14>
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 a7 00 	call	0x14e	; 0x14e <setError>
 172:	08 95       	ret
 174:	98 2f       	mov	r25, r24
 176:	90 64       	ori	r25, 0x40	; 64
 178:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 17c:	ea e7       	ldi	r30, 0x7A	; 122
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	90 81       	ld	r25, Z
 182:	90 64       	ori	r25, 0x40	; 64
 184:	90 83       	st	Z, r25
 186:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 18a:	08 95       	ret
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	0e 94 a7 00 	call	0x14e	; 0x14e <setError>
 192:	08 95       	ret

00000194 <init8BitsPWM>:
 194:	88 23       	and	r24, r24
 196:	19 f0       	breq	.+6      	; 0x19e <init8BitsPWM+0xa>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	89 f1       	breq	.+98     	; 0x1fe <init8BitsPWM+0x6a>
 19c:	72 c0       	rjmp	.+228    	; 0x282 <init8BitsPWM+0xee>
 19e:	84 b5       	in	r24, 0x24	; 36
 1a0:	83 60       	ori	r24, 0x03	; 3
 1a2:	84 bd       	out	0x24, r24	; 36
 1a4:	60 34       	cpi	r22, 0x40	; 64
 1a6:	71 05       	cpc	r23, r1
 1a8:	c1 f0       	breq	.+48     	; 0x1da <init8BitsPWM+0x46>
 1aa:	38 f4       	brcc	.+14     	; 0x1ba <init8BitsPWM+0x26>
 1ac:	61 30       	cpi	r22, 0x01	; 1
 1ae:	71 05       	cpc	r23, r1
 1b0:	61 f0       	breq	.+24     	; 0x1ca <init8BitsPWM+0x36>
 1b2:	68 30       	cpi	r22, 0x08	; 8
 1b4:	71 05       	cpc	r23, r1
 1b6:	69 f0       	breq	.+26     	; 0x1d2 <init8BitsPWM+0x3e>
 1b8:	1c c0       	rjmp	.+56     	; 0x1f2 <init8BitsPWM+0x5e>
 1ba:	61 15       	cp	r22, r1
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	78 07       	cpc	r23, r24
 1c0:	81 f0       	breq	.+32     	; 0x1e2 <init8BitsPWM+0x4e>
 1c2:	61 15       	cp	r22, r1
 1c4:	74 40       	sbci	r23, 0x04	; 4
 1c6:	89 f0       	breq	.+34     	; 0x1ea <init8BitsPWM+0x56>
 1c8:	14 c0       	rjmp	.+40     	; 0x1f2 <init8BitsPWM+0x5e>
 1ca:	85 b5       	in	r24, 0x25	; 37
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	85 bd       	out	0x25, r24	; 37
 1d0:	13 c0       	rjmp	.+38     	; 0x1f8 <init8BitsPWM+0x64>
 1d2:	85 b5       	in	r24, 0x25	; 37
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	85 bd       	out	0x25, r24	; 37
 1d8:	0f c0       	rjmp	.+30     	; 0x1f8 <init8BitsPWM+0x64>
 1da:	85 b5       	in	r24, 0x25	; 37
 1dc:	83 60       	ori	r24, 0x03	; 3
 1de:	85 bd       	out	0x25, r24	; 37
 1e0:	0b c0       	rjmp	.+22     	; 0x1f8 <init8BitsPWM+0x64>
 1e2:	85 b5       	in	r24, 0x25	; 37
 1e4:	84 60       	ori	r24, 0x04	; 4
 1e6:	85 bd       	out	0x25, r24	; 37
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <init8BitsPWM+0x64>
 1ea:	85 b5       	in	r24, 0x25	; 37
 1ec:	85 60       	ori	r24, 0x05	; 5
 1ee:	85 bd       	out	0x25, r24	; 37
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <init8BitsPWM+0x64>
 1f2:	85 b5       	in	r24, 0x25	; 37
 1f4:	85 60       	ori	r24, 0x05	; 5
 1f6:	85 bd       	out	0x25, r24	; 37
 1f8:	17 bc       	out	0x27, r1	; 39
 1fa:	18 bc       	out	0x28, r1	; 40
 1fc:	08 95       	ret
 1fe:	e0 e8       	ldi	r30, 0x80	; 128
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	83 60       	ori	r24, 0x03	; 3
 206:	80 83       	st	Z, r24
 208:	60 34       	cpi	r22, 0x40	; 64
 20a:	71 05       	cpc	r23, r1
 20c:	e1 f0       	breq	.+56     	; 0x246 <init8BitsPWM+0xb2>
 20e:	38 f4       	brcc	.+14     	; 0x21e <init8BitsPWM+0x8a>
 210:	61 30       	cpi	r22, 0x01	; 1
 212:	71 05       	cpc	r23, r1
 214:	61 f0       	breq	.+24     	; 0x22e <init8BitsPWM+0x9a>
 216:	68 30       	cpi	r22, 0x08	; 8
 218:	71 05       	cpc	r23, r1
 21a:	79 f0       	breq	.+30     	; 0x23a <init8BitsPWM+0xa6>
 21c:	25 c0       	rjmp	.+74     	; 0x268 <init8BitsPWM+0xd4>
 21e:	61 15       	cp	r22, r1
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	78 07       	cpc	r23, r24
 224:	b1 f0       	breq	.+44     	; 0x252 <init8BitsPWM+0xbe>
 226:	61 15       	cp	r22, r1
 228:	74 40       	sbci	r23, 0x04	; 4
 22a:	c9 f0       	breq	.+50     	; 0x25e <init8BitsPWM+0xca>
 22c:	1d c0       	rjmp	.+58     	; 0x268 <init8BitsPWM+0xd4>
 22e:	e1 e8       	ldi	r30, 0x81	; 129
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	81 60       	ori	r24, 0x01	; 1
 236:	80 83       	st	Z, r24
 238:	1c c0       	rjmp	.+56     	; 0x272 <init8BitsPWM+0xde>
 23a:	e1 e8       	ldi	r30, 0x81	; 129
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	82 60       	ori	r24, 0x02	; 2
 242:	80 83       	st	Z, r24
 244:	16 c0       	rjmp	.+44     	; 0x272 <init8BitsPWM+0xde>
 246:	e1 e8       	ldi	r30, 0x81	; 129
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	83 60       	ori	r24, 0x03	; 3
 24e:	80 83       	st	Z, r24
 250:	10 c0       	rjmp	.+32     	; 0x272 <init8BitsPWM+0xde>
 252:	e1 e8       	ldi	r30, 0x81	; 129
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	84 60       	ori	r24, 0x04	; 4
 25a:	80 83       	st	Z, r24
 25c:	0a c0       	rjmp	.+20     	; 0x272 <init8BitsPWM+0xde>
 25e:	e1 e8       	ldi	r30, 0x81	; 129
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	85 60       	ori	r24, 0x05	; 5
 266:	80 83       	st	Z, r24
 268:	e1 e8       	ldi	r30, 0x81	; 129
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	85 60       	ori	r24, 0x05	; 5
 270:	80 83       	st	Z, r24
 272:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 276:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 27a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 27e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 282:	85 e0       	ldi	r24, 0x05	; 5
 284:	0e 94 a7 00 	call	0x14e	; 0x14e <setError>
 288:	08 95       	ret

0000028a <setPWM>:
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	8c 30       	cpi	r24, 0x0C	; 12
 290:	d9 f0       	breq	.+54     	; 0x2c8 <setPWM+0x3e>
 292:	18 f4       	brcc	.+6      	; 0x29a <setPWM+0x10>
 294:	8b 30       	cpi	r24, 0x0B	; 11
 296:	39 f0       	breq	.+14     	; 0x2a6 <setPWM+0x1c>
 298:	67 c0       	rjmp	.+206    	; 0x368 <setPWM+0xde>
 29a:	8f 30       	cpi	r24, 0x0F	; 15
 29c:	31 f1       	breq	.+76     	; 0x2ea <setPWM+0x60>
 29e:	80 31       	cpi	r24, 0x10	; 16
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <setPWM+0x1a>
 2a2:	43 c0       	rjmp	.+134    	; 0x32a <setPWM+0xa0>
 2a4:	61 c0       	rjmp	.+194    	; 0x368 <setPWM+0xde>
 2a6:	61 11       	cpse	r22, r1
 2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <setPWM+0x2c>
 2aa:	84 b5       	in	r24, 0x24	; 36
 2ac:	8f 7d       	andi	r24, 0xDF	; 223
 2ae:	84 bd       	out	0x24, r24	; 36
 2b0:	18 bc       	out	0x28, r1	; 40
 2b2:	5d 98       	cbi	0x0b, 5	; 11
 2b4:	7e c0       	rjmp	.+252    	; 0x3b2 <setPWM+0x128>
 2b6:	88 b5       	in	r24, 0x28	; 40
 2b8:	68 17       	cp	r22, r24
 2ba:	09 f4       	brne	.+2      	; 0x2be <setPWM+0x34>
 2bc:	7a c0       	rjmp	.+244    	; 0x3b2 <setPWM+0x128>
 2be:	68 bd       	out	0x28, r22	; 40
 2c0:	84 b5       	in	r24, 0x24	; 36
 2c2:	80 62       	ori	r24, 0x20	; 32
 2c4:	84 bd       	out	0x24, r24	; 36
 2c6:	75 c0       	rjmp	.+234    	; 0x3b2 <setPWM+0x128>
 2c8:	61 11       	cpse	r22, r1
 2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <setPWM+0x4e>
 2cc:	84 b5       	in	r24, 0x24	; 36
 2ce:	8f 77       	andi	r24, 0x7F	; 127
 2d0:	84 bd       	out	0x24, r24	; 36
 2d2:	17 bc       	out	0x27, r1	; 39
 2d4:	5e 98       	cbi	0x0b, 6	; 11
 2d6:	6d c0       	rjmp	.+218    	; 0x3b2 <setPWM+0x128>
 2d8:	87 b5       	in	r24, 0x27	; 39
 2da:	68 17       	cp	r22, r24
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <setPWM+0x56>
 2de:	69 c0       	rjmp	.+210    	; 0x3b2 <setPWM+0x128>
 2e0:	67 bd       	out	0x27, r22	; 39
 2e2:	84 b5       	in	r24, 0x24	; 36
 2e4:	80 68       	ori	r24, 0x80	; 128
 2e6:	84 bd       	out	0x24, r24	; 36
 2e8:	64 c0       	rjmp	.+200    	; 0x3b2 <setPWM+0x128>
 2ea:	61 11       	cpse	r22, r1
 2ec:	0b c0       	rjmp	.+22     	; 0x304 <setPWM+0x7a>
 2ee:	e0 e8       	ldi	r30, 0x80	; 128
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	8f 77       	andi	r24, 0x7F	; 127
 2f6:	80 83       	st	Z, r24
 2f8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2fc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 300:	29 98       	cbi	0x05, 1	; 5
 302:	57 c0       	rjmp	.+174    	; 0x3b2 <setPWM+0x128>
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 30a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 30e:	68 17       	cp	r22, r24
 310:	79 07       	cpc	r23, r25
 312:	09 f4       	brne	.+2      	; 0x316 <setPWM+0x8c>
 314:	4e c0       	rjmp	.+156    	; 0x3b2 <setPWM+0x128>
 316:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 31a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 31e:	e0 e8       	ldi	r30, 0x80	; 128
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	80 68       	ori	r24, 0x80	; 128
 326:	80 83       	st	Z, r24
 328:	44 c0       	rjmp	.+136    	; 0x3b2 <setPWM+0x128>
 32a:	61 11       	cpse	r22, r1
 32c:	0b c0       	rjmp	.+22     	; 0x344 <setPWM+0xba>
 32e:	e1 e8       	ldi	r30, 0x81	; 129
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	8f 7d       	andi	r24, 0xDF	; 223
 336:	80 83       	st	Z, r24
 338:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 33c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 340:	2a 98       	cbi	0x05, 2	; 5
 342:	37 c0       	rjmp	.+110    	; 0x3b2 <setPWM+0x128>
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 34a:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 34e:	68 17       	cp	r22, r24
 350:	79 07       	cpc	r23, r25
 352:	79 f1       	breq	.+94     	; 0x3b2 <setPWM+0x128>
 354:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 358:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 35c:	e0 e8       	ldi	r30, 0x80	; 128
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	80 62       	ori	r24, 0x20	; 32
 364:	80 83       	st	Z, r24
 366:	25 c0       	rjmp	.+74     	; 0x3b2 <setPWM+0x128>
 368:	84 b5       	in	r24, 0x24	; 36
 36a:	8f 7d       	andi	r24, 0xDF	; 223
 36c:	84 bd       	out	0x24, r24	; 36
 36e:	40 e0       	ldi	r20, 0x00	; 0
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	8b e0       	ldi	r24, 0x0B	; 11
 374:	0e 94 51 00 	call	0xa2	; 0xa2 <setPin>
 378:	84 b5       	in	r24, 0x24	; 36
 37a:	8f 77       	andi	r24, 0x7F	; 127
 37c:	84 bd       	out	0x24, r24	; 36
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	8c e0       	ldi	r24, 0x0C	; 12
 384:	0e 94 51 00 	call	0xa2	; 0xa2 <setPin>
 388:	c0 e8       	ldi	r28, 0x80	; 128
 38a:	d0 e0       	ldi	r29, 0x00	; 0
 38c:	88 81       	ld	r24, Y
 38e:	8f 77       	andi	r24, 0x7F	; 127
 390:	88 83       	st	Y, r24
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	8f e0       	ldi	r24, 0x0F	; 15
 398:	0e 94 51 00 	call	0xa2	; 0xa2 <setPin>
 39c:	88 81       	ld	r24, Y
 39e:	8f 7d       	andi	r24, 0xDF	; 223
 3a0:	88 83       	st	Y, r24
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	80 e1       	ldi	r24, 0x10	; 16
 3a8:	0e 94 51 00 	call	0xa2	; 0xa2 <setPin>
 3ac:	83 e0       	ldi	r24, 0x03	; 3
 3ae:	0e 94 a7 00 	call	0x14e	; 0x14e <setError>
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <initTimer>:
 3b8:	8a e1       	ldi	r24, 0x1A	; 26
 3ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3be:	83 e1       	ldi	r24, 0x13	; 19
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 3c6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 3d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3d8:	08 95       	ret

000003da <main>:
 3da:	14 b8       	out	0x04, r1	; 4
 3dc:	17 b8       	out	0x07, r1	; 7
 3de:	8f ef       	ldi	r24, 0xFF	; 255
 3e0:	8a b9       	out	0x0a, r24	; 10
 3e2:	15 b8       	out	0x05, r1	; 5
 3e4:	18 b8       	out	0x08, r1	; 8
 3e6:	1b b8       	out	0x0b, r1	; 11
 3e8:	0e 94 9a 00 	call	0x134	; 0x134 <initADC>
 3ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3f0:	0e 94 a0 00 	call	0x140	; 0x140 <initErrorPin>
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	74 e0       	ldi	r23, 0x04	; 4
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 ca 00 	call	0x194	; 0x194 <init8BitsPWM>
 3fe:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <initTimer>
 402:	78 94       	sei
 404:	c0 e1       	ldi	r28, 0x10	; 16
 406:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ISR_ADC>
 40a:	88 23       	and	r24, r24
 40c:	41 f1       	breq	.+80     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 40e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	69 f0       	breq	.+26     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 416:	18 f0       	brcs	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	99 f0       	breq	.+38     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 41c:	1b c0       	rjmp	.+54     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 41e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <result_ADC>
 422:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <result_ADC+0x1>
 426:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <temperatureHBridge+0x1>
 42a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <temperatureHBridge>
 42e:	15 c0       	rjmp	.+42     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 430:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <result_ADC>
 434:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <result_ADC+0x1>
 438:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <temperatureMotor+0x1>
 43c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temperatureMotor>
 440:	0c c0       	rjmp	.+24     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 442:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <result_ADC>
 446:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <result_ADC+0x1>
 44a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <currentHBridge+0x1>
 44e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <currentHBridge>
 452:	03 c0       	rjmp	.+6      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 454:	84 e0       	ldi	r24, 0x04	; 4
 456:	0e 94 a7 00 	call	0x14e	; 0x14e <setError>
 45a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ISR_ADC>
 45e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <ISR_ADC>
 462:	81 11       	cpse	r24, r1
 464:	02 c0       	rjmp	.+4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 466:	0e 94 b0 00 	call	0x160	; 0x160 <startADC>
 46a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <result_ADC>
 46e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <result_ADC+0x1>
 472:	76 95       	lsr	r23
 474:	67 95       	ror	r22
 476:	76 95       	lsr	r23
 478:	67 95       	ror	r22
 47a:	8b e0       	ldi	r24, 0x0B	; 11
 47c:	0e 94 45 01 	call	0x28a	; 0x28a <setPWM>
 480:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <elapsed>
 484:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <elapsed+0x1>
 488:	89 3e       	cpi	r24, 0xE9	; 233
 48a:	93 40       	sbci	r25, 0x03	; 3
 48c:	08 f4       	brcc	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48e:	bb cf       	rjmp	.-138    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 490:	85 b1       	in	r24, 0x05	; 5
 492:	8c 27       	eor	r24, r28
 494:	85 b9       	out	0x05, r24	; 5
 496:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <elapsed>
 49a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <elapsed+0x1>
 49e:	88 5e       	subi	r24, 0xE8	; 232
 4a0:	93 40       	sbci	r25, 0x03	; 3
 4a2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <elapsed+0x1>
 4a6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <elapsed>
 4aa:	ad cf       	rjmp	.-166    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

000004ac <__vector_1>:
////////////////////////////// END FUNCTIONS DEFINITIONS //////////////////////////

////////////////////////////// ISRs //////////////////////////
ISR(INT0_vect){									// External Interrupt Request 0
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
	pulsesEncCHA ++;
 4be:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <pulsesEncCHA>
 4c2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <pulsesEncCHA+0x1>
 4c6:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <pulsesEncCHA+0x2>
 4ca:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <pulsesEncCHA+0x3>
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	a1 1d       	adc	r26, r1
 4d2:	b1 1d       	adc	r27, r1
 4d4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <pulsesEncCHA>
 4d8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <pulsesEncCHA+0x1>
 4dc:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <pulsesEncCHA+0x2>
 4e0:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <pulsesEncCHA+0x3>
}
 4e4:	bf 91       	pop	r27
 4e6:	af 91       	pop	r26
 4e8:	9f 91       	pop	r25
 4ea:	8f 91       	pop	r24
 4ec:	0f 90       	pop	r0
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	0f 90       	pop	r0
 4f2:	1f 90       	pop	r1
 4f4:	18 95       	reti

000004f6 <__vector_2>:
ISR(INT1_vect){									// External Interrupt Request 1
 4f6:	1f 92       	push	r1
 4f8:	0f 92       	push	r0
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	0f 92       	push	r0
 4fe:	11 24       	eor	r1, r1
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
 504:	af 93       	push	r26
 506:	bf 93       	push	r27
	pulsesEncCHB ++;
 508:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pulsesEncCHB>
 50c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <pulsesEncCHB+0x1>
 510:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <pulsesEncCHB+0x2>
 514:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <pulsesEncCHB+0x3>
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	a1 1d       	adc	r26, r1
 51c:	b1 1d       	adc	r27, r1
 51e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <pulsesEncCHB>
 522:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <pulsesEncCHB+0x1>
 526:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <pulsesEncCHB+0x2>
 52a:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <pulsesEncCHB+0x3>
}
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	0f 90       	pop	r0
 538:	0f be       	out	0x3f, r0	; 63
 53a:	0f 90       	pop	r0
 53c:	1f 90       	pop	r1
 53e:	18 95       	reti

00000540 <__vector_3>:
ISR(PCINT0_vect){								// Pin Change Interrupt Request 0
 540:	1f 92       	push	r1
 542:	0f 92       	push	r0
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	0f 92       	push	r0
 548:	11 24       	eor	r1, r1
	ISR_PCINT0 = 0;
 54a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ISR_PCINT0>
}
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti

00000558 <__vector_4>:
ISR(PCINT1_vect){								// Pin Change Interrupt Request 1
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
	ISR_PCINT1 = 0;
 562:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ISR_PCINT1>
}
 566:	0f 90       	pop	r0
 568:	0f be       	out	0x3f, r0	; 63
 56a:	0f 90       	pop	r0
 56c:	1f 90       	pop	r1
 56e:	18 95       	reti

00000570 <__vector_5>:
ISR(PCINT2_vect){								// Pin Change Interrupt Request 2
 570:	1f 92       	push	r1
 572:	0f 92       	push	r0
 574:	0f b6       	in	r0, 0x3f	; 63
 576:	0f 92       	push	r0
 578:	11 24       	eor	r1, r1
	ISR_PCINT2 = 0;
 57a:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <ISR_PCINT2>
}
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <__vector_6>:
ISR(WDT_vect){									// Watchdog Time-out Interrupt
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
	ISR_WDT = 0;
 592:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <ISR_WDT>
}
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

000005a0 <__vector_7>:
ISR(TIMER2_COMPA_vect){							// Timer/Counter 2 Compare Match A
 5a0:	1f 92       	push	r1
 5a2:	0f 92       	push	r0
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	0f 92       	push	r0
 5a8:	11 24       	eor	r1, r1
	ISR_TMR2CA = 0;
 5aa:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <ISR_TMR2CA>
}
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <__vector_8>:
ISR(TIMER2_COMPB_vect){							// Timer/Counter 2 Compare Match B
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	0f 92       	push	r0
 5c0:	11 24       	eor	r1, r1
	ISR_TMR2CB = 0;
 5c2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <ISR_TMR2CB>
}
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <__vector_9>:
ISR(TIMER2_OVF_vect){							// Timer/Counter 2 Overflow
 5d0:	1f 92       	push	r1
 5d2:	0f 92       	push	r0
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	0f 92       	push	r0
 5d8:	11 24       	eor	r1, r1
	ISR_TMR2OVF = 0;
 5da:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <ISR_TMR2OVF>
}
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__vector_10>:
ISR(TIMER1_CAPT_vect){							// Timer/Counter 1 Capture Event
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
	ISR_TMR1CAPT = 0;							
 5f2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <ISR_TMR1CAPT>
}
 5f6:	0f 90       	pop	r0
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	0f 90       	pop	r0
 5fc:	1f 90       	pop	r1
 5fe:	18 95       	reti

00000600 <__vector_11>:
ISR(TIMER1_COMPA_vect){							// Timer/Counter 1 Compare Match A
 600:	1f 92       	push	r1
 602:	0f 92       	push	r0
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	0f 92       	push	r0
 608:	11 24       	eor	r1, r1
 60a:	2f 93       	push	r18
 60c:	8f 93       	push	r24
 60e:	9f 93       	push	r25
 610:	af 93       	push	r26
 612:	bf 93       	push	r27
	microsSeconds += TIMEUNIT;					// Increment the number of microseconds by the TIMEUNIT
 614:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <microsSeconds>
 618:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <microsSeconds+0x1>
 61c:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <microsSeconds+0x2>
 620:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <microsSeconds+0x3>
 624:	0a 96       	adiw	r24, 0x0a	; 10
 626:	a1 1d       	adc	r26, r1
 628:	b1 1d       	adc	r27, r1
 62a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <microsSeconds>
 62e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <microsSeconds+0x1>
 632:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <microsSeconds+0x2>
 636:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <microsSeconds+0x3>
	micros1000s += TIMEUNIT;					// Increment rolling counter by TIMEUNIT
 63a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <micros1000s>
 63e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <micros1000s+0x1>
 642:	0a 96       	adiw	r24, 0x0a	; 10
 644:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <micros1000s+0x1>
 648:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <micros1000s>
	if (micros1000s>=1000){
 64c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <micros1000s>
 650:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <micros1000s+0x1>
 654:	88 3e       	cpi	r24, 0xE8	; 232
 656:	93 40       	sbci	r25, 0x03	; 3
 658:	30 f1       	brcs	.+76     	; 0x6a6 <__vector_11+0xa6>
		millisSeconds++;						// Increments milliseconds counter every 1000s of microseconds
 65a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <millisSeconds>
 65e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <millisSeconds+0x1>
 662:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <millisSeconds+0x2>
 666:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <millisSeconds+0x3>
 66a:	01 96       	adiw	r24, 0x01	; 1
 66c:	a1 1d       	adc	r26, r1
 66e:	b1 1d       	adc	r27, r1
 670:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <millisSeconds>
 674:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <millisSeconds+0x1>
 678:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <millisSeconds+0x2>
 67c:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <millisSeconds+0x3>
		micros1000s -= 1000;					// Adds the any extra microseconds to the rolling counter
 680:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <micros1000s>
 684:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <micros1000s+0x1>
 688:	88 5e       	subi	r24, 0xE8	; 232
 68a:	93 40       	sbci	r25, 0x03	; 3
 68c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <micros1000s+0x1>
 690:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <micros1000s>
		elapsed ++;
 694:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <elapsed>
 698:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <elapsed+0x1>
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <elapsed+0x1>
 6a2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <elapsed>
	}
}
 6a6:	bf 91       	pop	r27
 6a8:	af 91       	pop	r26
 6aa:	9f 91       	pop	r25
 6ac:	8f 91       	pop	r24
 6ae:	2f 91       	pop	r18
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <__vector_12>:
ISR(TIMER1_COMPB_vect){							// Timer/Counter 1 Compare Match B
 6ba:	1f 92       	push	r1
 6bc:	0f 92       	push	r0
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	0f 92       	push	r0
 6c2:	11 24       	eor	r1, r1
	ISR_TMR1CB = 0;
 6c4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <ISR_TMR1CB>
}
 6c8:	0f 90       	pop	r0
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	0f 90       	pop	r0
 6ce:	1f 90       	pop	r1
 6d0:	18 95       	reti

000006d2 <__vector_13>:
ISR(TIMER1_OVF_vect){							// Timer/Counter 1 Overflow
 6d2:	1f 92       	push	r1
 6d4:	0f 92       	push	r0
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	0f 92       	push	r0
 6da:	11 24       	eor	r1, r1
	ISR_TMR1OVF = 0;
 6dc:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <ISR_TMR1OVF>
}
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <__vector_14>:
ISR(TIMER0_COMPA_vect){							// Timer/Counter 0 Compare Match A
 6ea:	1f 92       	push	r1
 6ec:	0f 92       	push	r0
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	0f 92       	push	r0
 6f2:	11 24       	eor	r1, r1
	ISR_TMR0CA = 0;
 6f4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <ISR_TMR0CA>
}
 6f8:	0f 90       	pop	r0
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	0f 90       	pop	r0
 6fe:	1f 90       	pop	r1
 700:	18 95       	reti

00000702 <__vector_15>:
ISR(TIMER0_COMPB_vect){							// Timer/Counter 0 Compare Match B
 702:	1f 92       	push	r1
 704:	0f 92       	push	r0
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	0f 92       	push	r0
 70a:	11 24       	eor	r1, r1
	ISR_TMR0CB = 0;
 70c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ISR_TMR0CB>
}
 710:	0f 90       	pop	r0
 712:	0f be       	out	0x3f, r0	; 63
 714:	0f 90       	pop	r0
 716:	1f 90       	pop	r1
 718:	18 95       	reti

0000071a <__vector_16>:
ISR(TIMER0_OVF_vect){							// Timer/Counter 0 Overflow
 71a:	1f 92       	push	r1
 71c:	0f 92       	push	r0
 71e:	0f b6       	in	r0, 0x3f	; 63
 720:	0f 92       	push	r0
 722:	11 24       	eor	r1, r1
	ISR_TMR0OVF = 0;
 724:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <ISR_TMR0OVF>
}
 728:	0f 90       	pop	r0
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	0f 90       	pop	r0
 72e:	1f 90       	pop	r1
 730:	18 95       	reti

00000732 <__vector_17>:
ISR(SPI_STC_vect){								// SPI Serial Transfer Complete
 732:	1f 92       	push	r1
 734:	0f 92       	push	r0
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	0f 92       	push	r0
 73a:	11 24       	eor	r1, r1
	ISR_SPI = 0;
 73c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <ISR_SPI>
}
 740:	0f 90       	pop	r0
 742:	0f be       	out	0x3f, r0	; 63
 744:	0f 90       	pop	r0
 746:	1f 90       	pop	r1
 748:	18 95       	reti

0000074a <__vector_18>:
ISR(USART_RX_vect){								// USART Rx Complete
 74a:	1f 92       	push	r1
 74c:	0f 92       	push	r0
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	0f 92       	push	r0
 752:	11 24       	eor	r1, r1
	ISR_USARTRX = 0;
 754:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <ISR_USARTRX>
}
 758:	0f 90       	pop	r0
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	0f 90       	pop	r0
 75e:	1f 90       	pop	r1
 760:	18 95       	reti

00000762 <__vector_19>:
ISR(USART_UDRE_vect){							// USART Data Register Empty
 762:	1f 92       	push	r1
 764:	0f 92       	push	r0
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	0f 92       	push	r0
 76a:	11 24       	eor	r1, r1
	ISR_USARTUDRE = 0;
 76c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <ISR_USARTUDRE>
}
 770:	0f 90       	pop	r0
 772:	0f be       	out	0x3f, r0	; 63
 774:	0f 90       	pop	r0
 776:	1f 90       	pop	r1
 778:	18 95       	reti

0000077a <__vector_20>:
ISR(USART_TX_vect){								// USART TX Complete
 77a:	1f 92       	push	r1
 77c:	0f 92       	push	r0
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	0f 92       	push	r0
 782:	11 24       	eor	r1, r1
	ISR_USARTTX = 0;
 784:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <ISR_USARTTX>
}
 788:	0f 90       	pop	r0
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	0f 90       	pop	r0
 78e:	1f 90       	pop	r1
 790:	18 95       	reti

00000792 <__vector_21>:
ISR(ADC_vect){									// ADC Conversion Complete
 792:	1f 92       	push	r1
 794:	0f 92       	push	r0
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	0f 92       	push	r0
 79a:	11 24       	eor	r1, r1
 79c:	8f 93       	push	r24
 79e:	9f 93       	push	r25
	result_ADC = ADC;
 7a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 7a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 7a8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <result_ADC+0x1>
 7ac:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <result_ADC>
	ISR_ADC = 1;
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <ISR_ADC>
}
 7b6:	9f 91       	pop	r25
 7b8:	8f 91       	pop	r24
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <__vector_22>:
ISR(EE_READY_vect){								// EEPROM Ready
 7c4:	1f 92       	push	r1
 7c6:	0f 92       	push	r0
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	0f 92       	push	r0
 7cc:	11 24       	eor	r1, r1
	ISR_EEREADY = 0;
 7ce:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ISR_EEREADY>
}
 7d2:	0f 90       	pop	r0
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	0f 90       	pop	r0
 7d8:	1f 90       	pop	r1
 7da:	18 95       	reti

000007dc <__vector_23>:
ISR(ANALOG_COMP_vect){							// Analog Comparator
 7dc:	1f 92       	push	r1
 7de:	0f 92       	push	r0
 7e0:	0f b6       	in	r0, 0x3f	; 63
 7e2:	0f 92       	push	r0
 7e4:	11 24       	eor	r1, r1
	ISR_ANALOGCOMP = 0;
 7e6:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ISR_ANALOGCOMP>
}
 7ea:	0f 90       	pop	r0
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	0f 90       	pop	r0
 7f0:	1f 90       	pop	r1
 7f2:	18 95       	reti

000007f4 <__vector_24>:
ISR(TWI_vect){									// 2-wire Serial Interface
 7f4:	1f 92       	push	r1
 7f6:	0f 92       	push	r0
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	0f 92       	push	r0
 7fc:	11 24       	eor	r1, r1
	ISR_TWI = 0;
 7fe:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ISR_TWI>
}
 802:	0f 90       	pop	r0
 804:	0f be       	out	0x3f, r0	; 63
 806:	0f 90       	pop	r0
 808:	1f 90       	pop	r1
 80a:	18 95       	reti

0000080c <__vector_25>:
ISR(SPM_READY_vect){							// Store Program Memory Ready
 80c:	1f 92       	push	r1
 80e:	0f 92       	push	r0
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	0f 92       	push	r0
 814:	11 24       	eor	r1, r1
	ISR_SPM = 0;
 816:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ISR_SPM>
}
 81a:	0f 90       	pop	r0
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	0f 90       	pop	r0
 820:	1f 90       	pop	r1
 822:	18 95       	reti

00000824 <_exit>:
 824:	f8 94       	cli

00000826 <__stop_program>:
 826:	ff cf       	rjmp	.-2      	; 0x826 <__stop_program>
