
Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002a0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  00000336  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d4b  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084a  00000000  00000000  0000117b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ad  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000647  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a0  00000000  00000000  00002687  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002827  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
////////////////////////////// END VARIABLES DECLARATION //////////////////////////

int main (void){
////////////////////////////// SETUP /////////////////////////////////////////////
	//********** Pins configuration **********
	DDRB	= 0b00000011;																// Set pin direction (1=OUTPUT, 0=INPUT)
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB	= 0b00000100;																// Set pin state :
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	85 b9       	out	0x05, r24	; 5
	DDRC	= 0b00000001;																// - if OUTPUT:	1= HIGH, 		0= LOW
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	87 b9       	out	0x07, r24	; 7
	PORTC	= 0b00000000;																// - if INPUT:	1= Pullup on,	0= Pullup off
  b2:	18 b8       	out	0x08, r1	; 8
	DDRD	= 0b11111111;																//
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a b9       	out	0x0a, r24	; 10
	PORTD	= 0b00000000;																//
  b8:	1b b8       	out	0x0b, r1	; 11
	//********************
	
	//********** Services Initialization **********
	initADC();
  ba:	0e 94 7e 00 	call	0xfc	; 0xfc <initADC>
	initErrorPin(23);
  be:	87 e1       	ldi	r24, 0x17	; 23
  c0:	0e 94 ab 00 	call	0x156	; 0x156 <initErrorPin>
	//********************
	setError(0);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <setError>
	sei();																				// Enable Global Interrupt
  ca:	78 94       	sei
////////////////////////////// END SETUP /////////////////////////////////////////
	while(1) {
////////////////////////////// MAIN LOOP /////////////////////////////////////////		
		
		if (!(PINB & (1 << PINB2))){
  cc:	1a 99       	sbic	0x03, 2	; 3
  ce:	05 c0       	rjmp	.+10     	; 0xda <main+0x34>
			startADC(ADC5);
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	0e 94 84 00 	call	0x108	; 0x108 <startADC>
			clearError();
  d6:	0e 94 2b 01 	call	0x256	; 0x256 <clearError>
		}
		//********** ISR flags checks **********
		if (ISR_ADC){
  da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  de:	88 23       	and	r24, r24
  e0:	a9 f3       	breq	.-22     	; 0xcc <main+0x26>
			uint16_t ADCValue = 0;
			ADCValue = getADCValue();
  e2:	0e 94 95 00 	call	0x12a	; 0x12a <getADCValue>
  e6:	d8 2f       	mov	r29, r24
  e8:	c9 2f       	mov	r28, r25
			setError(0);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <setError>
			PORTD = (PORTB & 0x00) | ADCValue;
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	db b9       	out	0x0b, r29	; 11
			PORTB = (PORTB & 0x00) | ((ADCValue>>8) | 0xFC);
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	cc 6f       	ori	r28, 0xFC	; 252
  f8:	c5 b9       	out	0x05, r28	; 5
  fa:	e8 cf       	rjmp	.-48     	; 0xcc <main+0x26>

000000fc <initADC>:
#include "ADC.h"

////////////////////////////// ADC //////////////////////////////////////////////
//********** Initialize ADC **********
void initADC(){
	ISR_ADC = 0;
  fc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 100:	8f e8       	ldi	r24, 0x8F	; 143
 102:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 106:	08 95       	ret

00000108 <startADC>:
}
//********************

//********** Start ADC conversion **********
void startADC(uint8_t channel){
	if (ISR_ADC){
 108:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 10c:	99 23       	and	r25, r25
 10e:	21 f0       	breq	.+8      	; 0x118 <startADC+0x10>
		setError(1);
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <setError>
 116:	08 95       	ret
	}else{
		ADMUX = (1 << REFS0) | (channel << MUX0);
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ADCSRA |= (1 << ADSC);
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 64       	ori	r24, 0x40	; 64
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <getADCValue>:
}
//********************

//********** Handle ADC **********
uint16_t getADCValue(){
	uint16_t result = ADC;
 12a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 12e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ISR_ADC = 0;
 132:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	return result;
}
 136:	08 95       	ret

00000138 <__vector_21>:
//********************

//********** ADC ISR **********
ISR(ADC_vect){
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
	ISR_ADC = 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <initErrorPin>:
uint8_t port = 0;
uint8_t pin = 18;														// To be changed by pin 19. Damaged board has pin 19 always on.
uint8_t error = 0;

void initErrorPin(uint8_t errorPin){
	pin = errorPin;
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if (errorPin>=2 && errorPin<= 13){
 15a:	9e ef       	ldi	r25, 0xFE	; 254
 15c:	98 0f       	add	r25, r24
 15e:	9c 30       	cpi	r25, 0x0C	; 12
 160:	78 f4       	brcc	.+30     	; 0x180 <initErrorPin+0x2a>
		port = 1;
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <port>
		pin = errorPin-2;
 168:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		DDRD |= (1<<pin);
 16c:	4a b1       	in	r20, 0x0a	; 10
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <initErrorPin+0x22>
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	9a 95       	dec	r25
 17a:	e2 f7       	brpl	.-8      	; 0x174 <initErrorPin+0x1e>
 17c:	24 2b       	or	r18, r20
 17e:	2a b9       	out	0x0a, r18	; 10
	}
	if (errorPin>=14 && errorPin<= 19){
 180:	92 ef       	ldi	r25, 0xF2	; 242
 182:	98 0f       	add	r25, r24
 184:	96 30       	cpi	r25, 0x06	; 6
 186:	78 f4       	brcc	.+30     	; 0x1a6 <initErrorPin+0x50>
		port = 2;
 188:	22 e0       	ldi	r18, 0x02	; 2
 18a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <port>
		pin = errorPin-14;
 18e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		DDRB |= (1<<pin);
 192:	44 b1       	in	r20, 0x04	; 4
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <initErrorPin+0x48>
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	9a 95       	dec	r25
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <initErrorPin+0x44>
 1a2:	24 2b       	or	r18, r20
 1a4:	24 b9       	out	0x04, r18	; 4
	}
	if (errorPin>=23 && errorPin<= 28){
 1a6:	87 51       	subi	r24, 0x17	; 23
 1a8:	86 30       	cpi	r24, 0x06	; 6
 1aa:	88 f4       	brcc	.+34     	; 0x1ce <initErrorPin+0x78>
		port = 3;
 1ac:	93 e0       	ldi	r25, 0x03	; 3
 1ae:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <port>
		pin = errorPin-23;
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		DDRC |= (1<<pin);
 1b6:	47 b1       	in	r20, 0x07	; 7
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	b9 01       	movw	r22, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <initErrorPin+0x6e>
 1c0:	66 0f       	add	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	8a 95       	dec	r24
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <initErrorPin+0x6a>
 1c8:	cb 01       	movw	r24, r22
 1ca:	84 2b       	or	r24, r20
 1cc:	87 b9       	out	0x07, r24	; 7
 1ce:	08 95       	ret

000001d0 <setError>:
	}
}

void setError(uint8_t errorCode){
		error = errorCode;
 1d0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <error>
		switch(port){
 1d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <port>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	71 f0       	breq	.+28     	; 0x1f8 <setError+0x28>
 1dc:	28 f0       	brcs	.+10     	; 0x1e8 <setError+0x18>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	c1 f0       	breq	.+48     	; 0x212 <setError+0x42>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	19 f1       	breq	.+70     	; 0x22c <setError+0x5c>
 1e6:	2f c0       	rjmp	.+94     	; 0x246 <setError+0x76>
			case 0:
				initErrorPin(pin);
 1e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ec:	0e 94 ab 00 	call	0x156	; 0x156 <initErrorPin>
				setError(0);
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <setError>
				break;
 1f6:	08 95       	ret
			case 1:
				PORTD |= (1<<pin);
 1f8:	2b b1       	in	r18, 0x0b	; 11
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 202:	02 c0       	rjmp	.+4      	; 0x208 <setError+0x38>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <setError+0x34>
 20c:	82 2b       	or	r24, r18
 20e:	8b b9       	out	0x0b, r24	; 11
				break;
 210:	08 95       	ret
			case 2:
				PORTB |= (1<<pin);
 212:	25 b1       	in	r18, 0x05	; 5
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 21c:	02 c0       	rjmp	.+4      	; 0x222 <setError+0x52>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <setError+0x4e>
 226:	82 2b       	or	r24, r18
 228:	85 b9       	out	0x05, r24	; 5
				break;
 22a:	08 95       	ret
			case 3:
				PORTC |= (1<<pin);
 22c:	28 b1       	in	r18, 0x08	; 8
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 236:	02 c0       	rjmp	.+4      	; 0x23c <setError+0x6c>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <setError+0x68>
 240:	82 2b       	or	r24, r18
 242:	88 b9       	out	0x08, r24	; 8
				break;
 244:	08 95       	ret
			default:
				initErrorPin(pin);
 246:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 24a:	0e 94 ab 00 	call	0x156	; 0x156 <initErrorPin>
				setError(0);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <setError>
 254:	08 95       	ret

00000256 <clearError>:
				break;
		}
}

void clearError(){
	switch(port){
 256:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <port>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	71 f0       	breq	.+28     	; 0x27a <clearError+0x24>
 25e:	28 f0       	brcs	.+10     	; 0x26a <clearError+0x14>
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	71 f0       	breq	.+28     	; 0x280 <clearError+0x2a>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	79 f0       	breq	.+30     	; 0x286 <clearError+0x30>
 268:	11 c0       	rjmp	.+34     	; 0x28c <clearError+0x36>
		case 0:
			initErrorPin(pin);
 26a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 26e:	0e 94 ab 00 	call	0x156	; 0x156 <initErrorPin>
			setError(0);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <setError>
			break;
 278:	08 95       	ret
		case 1:
			PORTD &= (0<<pin);
 27a:	8b b1       	in	r24, 0x0b	; 11
 27c:	1b b8       	out	0x0b, r1	; 11
			break;
 27e:	08 95       	ret
		case 2:
			PORTB &= (0<<pin);
 280:	85 b1       	in	r24, 0x05	; 5
 282:	15 b8       	out	0x05, r1	; 5
			break;
 284:	08 95       	ret
		case 3:
			PORTC &= (0<<pin);
 286:	88 b1       	in	r24, 0x08	; 8
 288:	18 b8       	out	0x08, r1	; 8
			break;
 28a:	08 95       	ret
		default:
			initErrorPin(pin);
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 290:	0e 94 ab 00 	call	0x156	; 0x156 <initErrorPin>
			setError(0);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <setError>
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
