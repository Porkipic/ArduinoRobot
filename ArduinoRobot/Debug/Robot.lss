
Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000288  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  0000031e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e49  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008eb  00000000  00000000  00001289  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f3  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00002268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ca  00000000  00000000  000029ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002bb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
////////////////////////////// END VARIABLES DECLARATION //////////////////////////

int main (void){
////////////////////////////// SETUP /////////////////////////////////////////////
	//********** Pins configuration **********
	DDRB	= 0b00000011;																// Set pin direction (1=OUTPUT, 0=INPUT)
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB	= 0b00000100;																// Set pin state :
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	85 b9       	out	0x05, r24	; 5
	DDRC	= 0b00000001;																// - if OUTPUT:	1= HIGH, 		0= LOW
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	87 b9       	out	0x07, r24	; 7
	PORTC	= 0b00000000;																// - if INPUT:	1= Pullup on,	0= Pullup off
  b2:	18 b8       	out	0x08, r1	; 8
	DDRD	= 0b11111111;																//
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a b9       	out	0x0a, r24	; 10
	PORTD	= 0b00000000;																//
  b8:	1b b8       	out	0x0b, r1	; 11
	//********************
	
	//********** Services Initialization **********
	initADC();
  ba:	0e 94 80 00 	call	0x100	; 0x100 <initADC>
	initErrorPin(23);
  be:	87 e1       	ldi	r24, 0x17	; 23
  c0:	0e 94 ad 00 	call	0x15a	; 0x15a <initErrorPin>
	initPWM();
  c4:	0e 94 2d 01 	call	0x25a	; 0x25a <initPWM>
	//********************
	sei();																				// Enable Global Interrupt
  c8:	78 94       	sei
////////////////////////////// END SETUP /////////////////////////////////////////
	while(1) {
////////////////////////////// MAIN LOOP /////////////////////////////////////////		
		
		if (!(PINB & (1 << PINB2))){
  ca:	1a 99       	sbic	0x03, 2	; 3
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <main+0x32>
			setPWM(11, 1);
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	8b e0       	ldi	r24, 0x0B	; 11
  d2:	0e 94 36 01 	call	0x26c	; 0x26c <setPWM>
  d6:	0d c0       	rjmp	.+26     	; 0xf2 <main+0x4c>
			//PORTB = 0x01;
		}else{
			startADC(ADC5);
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	0e 94 86 00 	call	0x10c	; 0x10c <startADC>
			uint16_t ADCValue = getADCValue();
  de:	0e 94 97 00 	call	0x12e	; 0x12e <getADCValue>
			setPWM(11, ADCValue>>2);
  e2:	96 95       	lsr	r25
  e4:	87 95       	ror	r24
  e6:	96 95       	lsr	r25
  e8:	87 95       	ror	r24
  ea:	68 2f       	mov	r22, r24
  ec:	8b e0       	ldi	r24, 0x0B	; 11
  ee:	0e 94 36 01 	call	0x26c	; 0x26c <setPWM>
			//PORTB = 0x02;
		}
		//********** ISR flags checks **********
		if (ISR_ADC){
  f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  f6:	88 23       	and	r24, r24
  f8:	41 f3       	breq	.-48     	; 0xca <main+0x24>
			uint16_t ADCValue = 0;
			ADCValue = getADCValue();
  fa:	0e 94 97 00 	call	0x12e	; 0x12e <getADCValue>
  fe:	e5 cf       	rjmp	.-54     	; 0xca <main+0x24>

00000100 <initADC>:
#include "ADC.h"

////////////////////////////// ADC //////////////////////////////////////////////
//********** Initialize ADC **********
void initADC(){
	ISR_ADC = 0;																		// Reset to allow nez conversion after initialization
 100:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);	// Enable ADC, Enable Interrupt, Set prescaler to 128
 104:	8f e8       	ldi	r24, 0x8F	; 143
 106:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 10a:	08 95       	ret

0000010c <startADC>:
}
//********************

//********** Start ADC conversion **********
void startADC(uint8_t channel){
	if (ISR_ADC){																		// Prevent new conversion if previous is not cleared
 10c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 110:	99 23       	and	r25, r25
 112:	21 f0       	breq	.+8      	; 0x11c <startADC+0x10>
		setError(1);																	// Set error in Error manager (1 = error in ADC)
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <setError>
 11a:	08 95       	ret
	}else{
		ADMUX = (1 << REFS0) | (channel << MUX0);										// Set voltage reference (VCC), set ADC channel
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		ADCSRA |= (1 << ADSC);															// Start conversion
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
 12c:	08 95       	ret

0000012e <getADCValue>:
}
//********************

//********** Handle ADC **********
uint16_t getADCValue(){
	uint16_t result = ADC;																// Set ADC value to result
 12e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 132:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ISR_ADC = 0;																		// Reset ISR_ADC to allow new conversion
 136:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	return result;
}
 13a:	08 95       	ret

0000013c <__vector_21>:
//********************

//********** ADC ISR **********
ISR(ADC_vect){
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
	ISR_ADC = 1;																		// Set ISR_ADC. Variable to be polled in Main code
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <initErrorPin>:
uint8_t port = 0;
uint8_t pin = 18;														// To be changed by pin 19. Damaged board has pin 19 always on.
uint8_t error = 0;

void initErrorPin(uint8_t errorPin){
	pin = errorPin;
 15a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if (errorPin>=2 && errorPin<= 13){
 15e:	9e ef       	ldi	r25, 0xFE	; 254
 160:	98 0f       	add	r25, r24
 162:	9c 30       	cpi	r25, 0x0C	; 12
 164:	78 f4       	brcc	.+30     	; 0x184 <initErrorPin+0x2a>
		port = 1;
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <port>
		pin = errorPin-2;
 16c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		DDRD |= (1<<pin);
 170:	4a b1       	in	r20, 0x0a	; 10
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <initErrorPin+0x22>
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	9a 95       	dec	r25
 17e:	e2 f7       	brpl	.-8      	; 0x178 <initErrorPin+0x1e>
 180:	24 2b       	or	r18, r20
 182:	2a b9       	out	0x0a, r18	; 10
	}
	if (errorPin>=14 && errorPin<= 19){
 184:	92 ef       	ldi	r25, 0xF2	; 242
 186:	98 0f       	add	r25, r24
 188:	96 30       	cpi	r25, 0x06	; 6
 18a:	78 f4       	brcc	.+30     	; 0x1aa <initErrorPin+0x50>
		port = 2;
 18c:	22 e0       	ldi	r18, 0x02	; 2
 18e:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <port>
		pin = errorPin-14;
 192:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
		DDRB |= (1<<pin);
 196:	44 b1       	in	r20, 0x04	; 4
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <initErrorPin+0x48>
 19e:	22 0f       	add	r18, r18
 1a0:	33 1f       	adc	r19, r19
 1a2:	9a 95       	dec	r25
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <initErrorPin+0x44>
 1a6:	24 2b       	or	r18, r20
 1a8:	24 b9       	out	0x04, r18	; 4
	}
	if (errorPin>=23 && errorPin<= 28){
 1aa:	87 51       	subi	r24, 0x17	; 23
 1ac:	86 30       	cpi	r24, 0x06	; 6
 1ae:	88 f4       	brcc	.+34     	; 0x1d2 <initErrorPin+0x78>
		port = 3;
 1b0:	93 e0       	ldi	r25, 0x03	; 3
 1b2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <port>
		pin = errorPin-23;
 1b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		DDRC |= (1<<pin);
 1ba:	47 b1       	in	r20, 0x07	; 7
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	b9 01       	movw	r22, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <initErrorPin+0x6e>
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	8a 95       	dec	r24
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <initErrorPin+0x6a>
 1cc:	cb 01       	movw	r24, r22
 1ce:	84 2b       	or	r24, r20
 1d0:	87 b9       	out	0x07, r24	; 7
 1d2:	08 95       	ret

000001d4 <setError>:
	}
}

void setError(uint8_t errorCode){
		error = errorCode;
 1d4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <error>
		switch(port){
 1d8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <port>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	71 f0       	breq	.+28     	; 0x1fc <setError+0x28>
 1e0:	28 f0       	brcs	.+10     	; 0x1ec <setError+0x18>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	c1 f0       	breq	.+48     	; 0x216 <setError+0x42>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	19 f1       	breq	.+70     	; 0x230 <setError+0x5c>
 1ea:	2f c0       	rjmp	.+94     	; 0x24a <setError+0x76>
			case 0:
				initErrorPin(pin);
 1ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1f0:	0e 94 ad 00 	call	0x15a	; 0x15a <initErrorPin>
				setError(0);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <setError>
				break;
 1fa:	08 95       	ret
			case 1:
				PORTD |= (1<<pin);
 1fc:	2b b1       	in	r18, 0x0b	; 11
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 206:	02 c0       	rjmp	.+4      	; 0x20c <setError+0x38>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <setError+0x34>
 210:	82 2b       	or	r24, r18
 212:	8b b9       	out	0x0b, r24	; 11
				break;
 214:	08 95       	ret
			case 2:
				PORTB |= (1<<pin);
 216:	25 b1       	in	r18, 0x05	; 5
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 220:	02 c0       	rjmp	.+4      	; 0x226 <setError+0x52>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <setError+0x4e>
 22a:	82 2b       	or	r24, r18
 22c:	85 b9       	out	0x05, r24	; 5
				break;
 22e:	08 95       	ret
			case 3:
				PORTC |= (1<<pin);
 230:	28 b1       	in	r18, 0x08	; 8
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__data_start>
 23a:	02 c0       	rjmp	.+4      	; 0x240 <setError+0x6c>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <setError+0x68>
 244:	82 2b       	or	r24, r18
 246:	88 b9       	out	0x08, r24	; 8
				break;
 248:	08 95       	ret
			default:
				initErrorPin(pin);
 24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 24e:	0e 94 ad 00 	call	0x15a	; 0x15a <initErrorPin>
				setError(0);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <setError>
 258:	08 95       	ret

0000025a <initPWM>:
#include "PWM.h"

void initPWM(){
	TCCR0A |= (1<<COM0A1) | (1<<COM0B1) | (1<<WGM01) | (1<<WGM00);		// Output set low on Compare A interrupt, output set low on compare B, set mode to fast PWM
 25a:	84 b5       	in	r24, 0x24	; 36
 25c:	83 6a       	ori	r24, 0xA3	; 163
 25e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02);												// Set prescaler on clock/256s
 260:	85 b5       	in	r24, 0x25	; 37
 262:	84 60       	ori	r24, 0x04	; 4
 264:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0;															// Reset Compare A value
 266:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;															// Reset Compare B value
 268:	18 bc       	out	0x28, r1	; 40
 26a:	08 95       	ret

0000026c <setPWM>:
}
void setPWM(uint8_t pinPWM, uint8_t valuePWM){
	switch(pinPWM){
 26c:	8b 30       	cpi	r24, 0x0B	; 11
 26e:	21 f0       	breq	.+8      	; 0x278 <setPWM+0xc>
 270:	8c 30       	cpi	r24, 0x0C	; 12
 272:	21 f4       	brne	.+8      	; 0x27c <setPWM+0x10>
		case 12:
			OCR0A = valuePWM;											// Set Compare A value. An interrupt will happen with the counter will reach this value
 274:	67 bd       	out	0x27, r22	; 39
			break;
 276:	08 95       	ret
		case 11:
			OCR0B = valuePWM;											// Set Compare A value. An interrupt will happen with the counter will reach this value
 278:	68 bd       	out	0x28, r22	; 40
			break;
 27a:	08 95       	ret
		default:														// If invalid pin number, generate error
			setError(3);
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <setError>
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
