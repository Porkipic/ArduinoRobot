
Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000d12  00000da6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  00800102  00800102  00000da8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001423  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000834  00000000  00000000  000023a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bfa  00000000  00000000  00002bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  000037d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d3  00000000  00000000  00003cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de9  00000000  00000000  0000458f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
   4:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_1>
   8:	0c 94 a8 03 	jmp	0x750	; 0x750 <__vector_2>
   c:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__vector_3>
  10:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__vector_4>
  14:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_5>
  18:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_6>
  1c:	0c 94 00 04 	jmp	0x800	; 0x800 <__vector_7>
  20:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__vector_8>
  24:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_9>
  28:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__vector_10>
  2c:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__vector_11>
  30:	0c 94 b1 04 	jmp	0x962	; 0x962 <__vector_12>
  34:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_13>
  38:	0c 94 cc 04 	jmp	0x998	; 0x998 <__vector_14>
  3c:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_15>
  40:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_16>
  44:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__vector_17>
  48:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__vector_18>
  4c:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_19>
  50:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__vector_20>
  54:	0c 94 67 05 	jmp	0xace	; 0xace <__vector_21>
  58:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__vector_22>
  5c:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__vector_23>
  60:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__vector_24>
  64:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__vector_25>
  68:	ba 05       	cpc	r27, r10
  6a:	dc 05       	cpc	r29, r12
  6c:	df 05       	cpc	r29, r15
  6e:	dc 05       	cpc	r29, r12
  70:	dc 05       	cpc	r29, r12
  72:	dc 05       	cpc	r29, r12
  74:	dc 05       	cpc	r29, r12
  76:	dc 05       	cpc	r29, r12
  78:	dc 05       	cpc	r29, r12
  7a:	dc 05       	cpc	r29, r12
  7c:	c4 05       	cpc	r28, r4
  7e:	dc 05       	cpc	r29, r12
  80:	ce 05       	cpc	r28, r14
  82:	dc 05       	cpc	r29, r12
  84:	dc 05       	cpc	r29, r12
  86:	dc 05       	cpc	r29, r12
  88:	dc 05       	cpc	r29, r12
  8a:	dc 05       	cpc	r29, r12
  8c:	dc 05       	cpc	r29, r12
  8e:	dc 05       	cpc	r29, r12
  90:	d2 05       	cpc	r29, r2
  92:	dc 05       	cpc	r29, r12
  94:	d8 05       	cpc	r29, r8
  96:	dc 05       	cpc	r29, r12
  98:	dc 05       	cpc	r29, r12
  9a:	dc 05       	cpc	r29, r12
  9c:	dc 05       	cpc	r29, r12
  9e:	dc 05       	cpc	r29, r12
  a0:	dc 05       	cpc	r29, r12
  a2:	dc 05       	cpc	r29, r12
  a4:	df 05       	cpc	r29, r15

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	d8 e0       	ldi	r29, 0x08	; 8
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	e2 e1       	ldi	r30, 0x12	; 18
  ba:	fd e0       	ldi	r31, 0x0D	; 13
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
  be:	05 90       	lpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a2 30       	cpi	r26, 0x02	; 2
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a2 e0       	ldi	r26, 0x02	; 2
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a9 35       	cpi	r26, 0x59	; 89
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	0e 94 77 02 	call	0x4ee	; 0x4ee <main>
  dc:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <_exit>

000000e0 <setPin>:
		result = 8;
	} else if(number<1000000000){
		result = 9;
	} 
	return result;
}
  e0:	9e ef       	ldi	r25, 0xFE	; 254
  e2:	98 0f       	add	r25, r24
  e4:	9c 30       	cpi	r25, 0x0C	; 12
  e6:	a8 f4       	brcc	.+42     	; 0x112 <setPin+0x32>
  e8:	5a b1       	in	r21, 0x0a	; 10
  ea:	26 2f       	mov	r18, r22
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	09 2e       	mov	r0, r25
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <setPin+0x16>
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <setPin+0x12>
  fa:	25 2b       	or	r18, r21
  fc:	2a b9       	out	0x0a, r18	; 10
  fe:	5b b1       	in	r21, 0x0b	; 11
 100:	24 2f       	mov	r18, r20
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <setPin+0x2a>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	9a 95       	dec	r25
 10c:	e2 f7       	brpl	.-8      	; 0x106 <setPin+0x26>
 10e:	25 2b       	or	r18, r21
 110:	2b b9       	out	0x0b, r18	; 11
 112:	92 ef       	ldi	r25, 0xF2	; 242
 114:	98 0f       	add	r25, r24
 116:	96 30       	cpi	r25, 0x06	; 6
 118:	a8 f4       	brcc	.+42     	; 0x144 <setPin+0x64>
 11a:	54 b1       	in	r21, 0x04	; 4
 11c:	26 2f       	mov	r18, r22
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	09 2e       	mov	r0, r25
 122:	02 c0       	rjmp	.+4      	; 0x128 <setPin+0x48>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <setPin+0x44>
 12c:	25 2b       	or	r18, r21
 12e:	24 b9       	out	0x04, r18	; 4
 130:	55 b1       	in	r21, 0x05	; 5
 132:	24 2f       	mov	r18, r20
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <setPin+0x5c>
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	9a 95       	dec	r25
 13e:	e2 f7       	brpl	.-8      	; 0x138 <setPin+0x58>
 140:	25 2b       	or	r18, r21
 142:	25 b9       	out	0x05, r18	; 5
 144:	87 51       	subi	r24, 0x17	; 23
 146:	86 30       	cpi	r24, 0x06	; 6
 148:	98 f4       	brcc	.+38     	; 0x170 <setPin+0x90>
 14a:	97 b1       	in	r25, 0x07	; 7
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	08 2e       	mov	r0, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <setPin+0x76>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <setPin+0x72>
 15a:	69 2b       	or	r22, r25
 15c:	67 b9       	out	0x07, r22	; 7
 15e:	98 b1       	in	r25, 0x08	; 8
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <setPin+0x88>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	8a 95       	dec	r24
 16a:	e2 f7       	brpl	.-8      	; 0x164 <setPin+0x84>
 16c:	49 2b       	or	r20, r25
 16e:	48 b9       	out	0x08, r20	; 8
 170:	08 95       	ret

00000172 <initADC>:
 172:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <ISR_ADC>
 176:	8f e8       	ldi	r24, 0x8F	; 143
 178:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 17c:	08 95       	ret

0000017e <initErrorPin>:
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	0e 94 70 00 	call	0xe0	; 0xe0 <setPin>
 18a:	08 95       	ret

0000018c <setError>:
 18c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <errorCode>
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 198:	0e 94 70 00 	call	0xe0	; 0xe0 <setPin>
 19c:	08 95       	ret

0000019e <startADC>:
 19e:	cf 93       	push	r28
 1a0:	c8 2f       	mov	r28, r24
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	d0 f4       	brcc	.+52     	; 0x1da <startADC+0x3c>
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	87 e1       	ldi	r24, 0x17	; 23
 1ac:	8c 0f       	add	r24, r28
 1ae:	0e 94 70 00 	call	0xe0	; 0xe0 <setPin>
 1b2:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <ISR_ADC>
 1b6:	88 23       	and	r24, r24
 1b8:	21 f0       	breq	.+8      	; 0x1c2 <startADC+0x24>
 1ba:	8b e0       	ldi	r24, 0x0B	; 11
 1bc:	0e 94 c6 00 	call	0x18c	; 0x18c <setError>
 1c0:	0f c0       	rjmp	.+30     	; 0x1e0 <startADC+0x42>
 1c2:	8c 2f       	mov	r24, r28
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1ca:	ea e7       	ldi	r30, 0x7A	; 122
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	80 83       	st	Z, r24
 1d4:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <__data_end>
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <startADC+0x42>
 1da:	8a e0       	ldi	r24, 0x0A	; 10
 1dc:	0e 94 c6 00 	call	0x18c	; 0x18c <setError>
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <initPWM>:
 1e4:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <prescalerPWM+0x1>
 1e8:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <prescalerPWM>
 1ec:	88 23       	and	r24, r24
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <initPWM+0x12>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	89 f1       	breq	.+98     	; 0x256 <initPWM+0x72>
 1f4:	72 c0       	rjmp	.+228    	; 0x2da <initPWM+0xf6>
 1f6:	84 b5       	in	r24, 0x24	; 36
 1f8:	83 60       	ori	r24, 0x03	; 3
 1fa:	84 bd       	out	0x24, r24	; 36
 1fc:	60 34       	cpi	r22, 0x40	; 64
 1fe:	71 05       	cpc	r23, r1
 200:	c1 f0       	breq	.+48     	; 0x232 <initPWM+0x4e>
 202:	38 f4       	brcc	.+14     	; 0x212 <initPWM+0x2e>
 204:	61 30       	cpi	r22, 0x01	; 1
 206:	71 05       	cpc	r23, r1
 208:	61 f0       	breq	.+24     	; 0x222 <initPWM+0x3e>
 20a:	68 30       	cpi	r22, 0x08	; 8
 20c:	71 05       	cpc	r23, r1
 20e:	69 f0       	breq	.+26     	; 0x22a <initPWM+0x46>
 210:	1c c0       	rjmp	.+56     	; 0x24a <initPWM+0x66>
 212:	61 15       	cp	r22, r1
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	78 07       	cpc	r23, r24
 218:	81 f0       	breq	.+32     	; 0x23a <initPWM+0x56>
 21a:	61 15       	cp	r22, r1
 21c:	74 40       	sbci	r23, 0x04	; 4
 21e:	89 f0       	breq	.+34     	; 0x242 <initPWM+0x5e>
 220:	14 c0       	rjmp	.+40     	; 0x24a <initPWM+0x66>
 222:	85 b5       	in	r24, 0x25	; 37
 224:	81 60       	ori	r24, 0x01	; 1
 226:	85 bd       	out	0x25, r24	; 37
 228:	13 c0       	rjmp	.+38     	; 0x250 <initPWM+0x6c>
 22a:	85 b5       	in	r24, 0x25	; 37
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	85 bd       	out	0x25, r24	; 37
 230:	0f c0       	rjmp	.+30     	; 0x250 <initPWM+0x6c>
 232:	85 b5       	in	r24, 0x25	; 37
 234:	83 60       	ori	r24, 0x03	; 3
 236:	85 bd       	out	0x25, r24	; 37
 238:	0b c0       	rjmp	.+22     	; 0x250 <initPWM+0x6c>
 23a:	85 b5       	in	r24, 0x25	; 37
 23c:	84 60       	ori	r24, 0x04	; 4
 23e:	85 bd       	out	0x25, r24	; 37
 240:	07 c0       	rjmp	.+14     	; 0x250 <initPWM+0x6c>
 242:	85 b5       	in	r24, 0x25	; 37
 244:	85 60       	ori	r24, 0x05	; 5
 246:	85 bd       	out	0x25, r24	; 37
 248:	03 c0       	rjmp	.+6      	; 0x250 <initPWM+0x6c>
 24a:	85 b5       	in	r24, 0x25	; 37
 24c:	85 60       	ori	r24, 0x05	; 5
 24e:	85 bd       	out	0x25, r24	; 37
 250:	17 bc       	out	0x27, r1	; 39
 252:	18 bc       	out	0x28, r1	; 40
 254:	08 95       	ret
 256:	e0 e8       	ldi	r30, 0x80	; 128
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	83 60       	ori	r24, 0x03	; 3
 25e:	80 83       	st	Z, r24
 260:	60 34       	cpi	r22, 0x40	; 64
 262:	71 05       	cpc	r23, r1
 264:	e1 f0       	breq	.+56     	; 0x29e <initPWM+0xba>
 266:	38 f4       	brcc	.+14     	; 0x276 <initPWM+0x92>
 268:	61 30       	cpi	r22, 0x01	; 1
 26a:	71 05       	cpc	r23, r1
 26c:	61 f0       	breq	.+24     	; 0x286 <initPWM+0xa2>
 26e:	68 30       	cpi	r22, 0x08	; 8
 270:	71 05       	cpc	r23, r1
 272:	79 f0       	breq	.+30     	; 0x292 <initPWM+0xae>
 274:	25 c0       	rjmp	.+74     	; 0x2c0 <initPWM+0xdc>
 276:	61 15       	cp	r22, r1
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	78 07       	cpc	r23, r24
 27c:	b1 f0       	breq	.+44     	; 0x2aa <initPWM+0xc6>
 27e:	61 15       	cp	r22, r1
 280:	74 40       	sbci	r23, 0x04	; 4
 282:	c9 f0       	breq	.+50     	; 0x2b6 <initPWM+0xd2>
 284:	1d c0       	rjmp	.+58     	; 0x2c0 <initPWM+0xdc>
 286:	e1 e8       	ldi	r30, 0x81	; 129
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	80 83       	st	Z, r24
 290:	1c c0       	rjmp	.+56     	; 0x2ca <initPWM+0xe6>
 292:	e1 e8       	ldi	r30, 0x81	; 129
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	80 83       	st	Z, r24
 29c:	16 c0       	rjmp	.+44     	; 0x2ca <initPWM+0xe6>
 29e:	e1 e8       	ldi	r30, 0x81	; 129
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	83 60       	ori	r24, 0x03	; 3
 2a6:	80 83       	st	Z, r24
 2a8:	10 c0       	rjmp	.+32     	; 0x2ca <initPWM+0xe6>
 2aa:	e1 e8       	ldi	r30, 0x81	; 129
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	84 60       	ori	r24, 0x04	; 4
 2b2:	80 83       	st	Z, r24
 2b4:	0a c0       	rjmp	.+20     	; 0x2ca <initPWM+0xe6>
 2b6:	e1 e8       	ldi	r30, 0x81	; 129
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	85 60       	ori	r24, 0x05	; 5
 2be:	80 83       	st	Z, r24
 2c0:	e1 e8       	ldi	r30, 0x81	; 129
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	85 60       	ori	r24, 0x05	; 5
 2c8:	80 83       	st	Z, r24
 2ca:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2ce:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2d2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2d6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 2da:	84 e1       	ldi	r24, 0x14	; 20
 2dc:	0e 94 c6 00 	call	0x18c	; 0x18c <setError>
 2e0:	08 95       	ret

000002e2 <initTimer>:
 2e2:	cf 93       	push	r28
 2e4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <prescalerTimer+0x1>
 2e8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <prescalerTimer>
 2ec:	22 e0       	ldi	r18, 0x02	; 2
 2ee:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 2f2:	80 34       	cpi	r24, 0x40	; 64
 2f4:	91 05       	cpc	r25, r1
 2f6:	11 f1       	breq	.+68     	; 0x33c <initTimer+0x5a>
 2f8:	48 f4       	brcc	.+18     	; 0x30c <initTimer+0x2a>
 2fa:	88 30       	cpi	r24, 0x08	; 8
 2fc:	91 05       	cpc	r25, r1
 2fe:	b1 f0       	breq	.+44     	; 0x32c <initTimer+0x4a>
 300:	80 32       	cpi	r24, 0x20	; 32
 302:	91 05       	cpc	r25, r1
 304:	b9 f0       	breq	.+46     	; 0x334 <initTimer+0x52>
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	49 f5       	brne	.+82     	; 0x35c <initTimer+0x7a>
 30a:	0c c0       	rjmp	.+24     	; 0x324 <initTimer+0x42>
 30c:	81 15       	cp	r24, r1
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	92 07       	cpc	r25, r18
 312:	e1 f0       	breq	.+56     	; 0x34c <initTimer+0x6a>
 314:	81 15       	cp	r24, r1
 316:	24 e0       	ldi	r18, 0x04	; 4
 318:	92 07       	cpc	r25, r18
 31a:	e1 f0       	breq	.+56     	; 0x354 <initTimer+0x72>
 31c:	80 38       	cpi	r24, 0x80	; 128
 31e:	91 05       	cpc	r25, r1
 320:	e9 f4       	brne	.+58     	; 0x35c <initTimer+0x7a>
 322:	10 c0       	rjmp	.+32     	; 0x344 <initTimer+0x62>
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 32a:	1b c0       	rjmp	.+54     	; 0x362 <initTimer+0x80>
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 332:	17 c0       	rjmp	.+46     	; 0x362 <initTimer+0x80>
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 33a:	13 c0       	rjmp	.+38     	; 0x362 <initTimer+0x80>
 33c:	84 e0       	ldi	r24, 0x04	; 4
 33e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 342:	0f c0       	rjmp	.+30     	; 0x362 <initTimer+0x80>
 344:	85 e0       	ldi	r24, 0x05	; 5
 346:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 34a:	0b c0       	rjmp	.+22     	; 0x362 <initTimer+0x80>
 34c:	86 e0       	ldi	r24, 0x06	; 6
 34e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 352:	07 c0       	rjmp	.+14     	; 0x362 <initTimer+0x80>
 354:	87 e0       	ldi	r24, 0x07	; 7
 356:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 35a:	03 c0       	rjmp	.+6      	; 0x362 <initTimer+0x80>
 35c:	87 e0       	ldi	r24, 0x07	; 7
 35e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 362:	c2 e0       	ldi	r28, 0x02	; 2
 364:	c0 93 b1 00 	sts	0x00B1, r28	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 368:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <prescalerTimer>
 36c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <prescalerTimer+0x1>
 370:	22 0f       	add	r18, r18
 372:	33 1f       	adc	r19, r19
 374:	a0 e5       	ldi	r26, 0x50	; 80
 376:	b3 ec       	ldi	r27, 0xC3	; 195
 378:	0e 94 43 06 	call	0xc86	; 0xc86 <__umulhisi3>
 37c:	9b 01       	movw	r18, r22
 37e:	ac 01       	movw	r20, r24
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	74 e2       	ldi	r23, 0x24	; 36
 384:	84 ef       	ldi	r24, 0xF4	; 244
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__udivmodsi4>
 38c:	22 50       	subi	r18, 0x02	; 2
 38e:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 392:	c0 93 70 00 	sts	0x0070, r28	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 396:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <initInputCapture>:
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	ec 01       	movw	r28, r24
 3a6:	16 2f       	mov	r17, r22
 3a8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <prescalerInputCapture+0x1>
 3ac:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <prescalerInputCapture>
 3b0:	9c 01       	movw	r18, r24
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	74 e2       	ldi	r23, 0x24	; 36
 3ba:	84 ef       	ldi	r24, 0xF4	; 244
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__udivmodsi4>
 3c2:	60 e4       	ldi	r22, 0x40	; 64
 3c4:	72 e4       	ldi	r23, 0x42	; 66
 3c6:	8f e0       	ldi	r24, 0x0F	; 15
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__udivmodsi4>
 3ce:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <inCaptTimeUnit+0x1>
 3d2:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <inCaptTimeUnit>
 3d6:	80 e4       	ldi	r24, 0x40	; 64
 3d8:	18 9f       	mul	r17, r24
 3da:	b0 01       	movw	r22, r0
 3dc:	11 24       	eor	r1, r1
 3de:	60 68       	ori	r22, 0x80	; 128
 3e0:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3e4:	c0 34       	cpi	r28, 0x40	; 64
 3e6:	d1 05       	cpc	r29, r1
 3e8:	d9 f0       	breq	.+54     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3ea:	30 f4       	brcc	.+12     	; 0x3f8 <initInputCapture+0x5a>
 3ec:	c1 30       	cpi	r28, 0x01	; 1
 3ee:	d1 05       	cpc	r29, r1
 3f0:	59 f0       	breq	.+22     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f2:	28 97       	sbiw	r28, 0x08	; 8
 3f4:	79 f0       	breq	.+30     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f6:	26 c0       	rjmp	.+76     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3f8:	c1 15       	cp	r28, r1
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	d8 07       	cpc	r29, r24
 3fe:	b1 f0       	breq	.+44     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 400:	c1 15       	cp	r28, r1
 402:	d4 40       	sbci	r29, 0x04	; 4
 404:	c9 f0       	breq	.+50     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 406:	1e c0       	rjmp	.+60     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 408:	e1 e8       	ldi	r30, 0x81	; 129
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	81 60       	ori	r24, 0x01	; 1
 410:	80 83       	st	Z, r24
 412:	1d c0       	rjmp	.+58     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 414:	e1 e8       	ldi	r30, 0x81	; 129
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	82 60       	ori	r24, 0x02	; 2
 41c:	80 83       	st	Z, r24
 41e:	17 c0       	rjmp	.+46     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 420:	e1 e8       	ldi	r30, 0x81	; 129
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	83 60       	ori	r24, 0x03	; 3
 428:	80 83       	st	Z, r24
 42a:	11 c0       	rjmp	.+34     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 42c:	e1 e8       	ldi	r30, 0x81	; 129
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	85 60       	ori	r24, 0x05	; 5
 434:	80 83       	st	Z, r24
 436:	0b c0       	rjmp	.+22     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 438:	e1 e8       	ldi	r30, 0x81	; 129
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	81 60       	ori	r24, 0x01	; 1
 440:	80 83       	st	Z, r24
 442:	05 c0       	rjmp	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 444:	e1 e8       	ldi	r30, 0x81	; 129
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	81 60       	ori	r24, 0x01	; 1
 44c:	80 83       	st	Z, r24
 44e:	80 e2       	ldi	r24, 0x20	; 32
 450:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	08 95       	ret

0000045c <initUSART>:
 45c:	87 e6       	ldi	r24, 0x67	; 103
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 464:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 468:	88 ed       	ldi	r24, 0xD8	; 216
 46a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 46e:	86 e0       	ldi	r24, 0x06	; 6
 470:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 474:	08 95       	ret

00000476 <transmitUSART>:
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
 47e:	2a 97       	sbiw	r28, 0x0a	; 10
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	dc 01       	movw	r26, r24
 48c:	cb 01       	movw	r24, r22
 48e:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <ISR_USARTTX>
 492:	22 23       	and	r18, r18
 494:	21 f0       	breq	.+8      	; 0x49e <transmitUSART+0x28>
 496:	88 e2       	ldi	r24, 0x28	; 40
 498:	0e 94 c6 00 	call	0x18c	; 0x18c <setError>
 49c:	1f c0       	rjmp	.+62     	; 0x4dc <transmitUSART+0x66>
 49e:	4a e0       	ldi	r20, 0x0A	; 10
 4a0:	be 01       	movw	r22, r28
 4a2:	6f 5f       	subi	r22, 0xFF	; 255
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	0e 94 52 06 	call	0xca4	; 0xca4 <__itoa_ncheck>
 4aa:	de 01       	movw	r26, r28
 4ac:	11 96       	adiw	r26, 0x01	; 1
 4ae:	be 01       	movw	r22, r28
 4b0:	65 5f       	subi	r22, 0xF5	; 245
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	cd 01       	movw	r24, r26
 4b6:	31 e0       	ldi	r19, 0x01	; 1
 4b8:	46 ec       	ldi	r20, 0xC6	; 198
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	fc 01       	movw	r30, r24
 4be:	01 90       	ld	r0, Z+
 4c0:	00 20       	and	r0, r0
 4c2:	e9 f7       	brne	.-6      	; 0x4be <transmitUSART+0x48>
 4c4:	31 97       	sbiw	r30, 0x01	; 1
 4c6:	e8 1b       	sub	r30, r24
 4c8:	f9 0b       	sbc	r31, r25
 4ca:	e8 b9       	out	0x08, r30	; 8
 4cc:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <ISR_USARTTX>
 4d0:	2d 91       	ld	r18, X+
 4d2:	fa 01       	movw	r30, r20
 4d4:	20 83       	st	Z, r18
 4d6:	a6 17       	cp	r26, r22
 4d8:	b7 07       	cpc	r27, r23
 4da:	81 f7       	brne	.-32     	; 0x4bc <transmitUSART+0x46>
 4dc:	2a 96       	adiw	r28, 0x0a	; 10
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	de bf       	out	0x3e, r29	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	cd bf       	out	0x3d, r28	; 61
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <main>:
 4ee:	86 e0       	ldi	r24, 0x06	; 6
 4f0:	84 b9       	out	0x04, r24	; 4
 4f2:	8f ef       	ldi	r24, 0xFF	; 255
 4f4:	87 b9       	out	0x07, r24	; 7
 4f6:	8a b9       	out	0x0a, r24	; 10
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	85 b9       	out	0x05, r24	; 5
 4fc:	18 b8       	out	0x08, r1	; 8
 4fe:	1b b8       	out	0x0b, r1	; 11
 500:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 504:	0e 94 bf 00 	call	0x17e	; 0x17e <initErrorPin>
 508:	0e 94 71 01 	call	0x2e2	; 0x2e2 <initTimer>
 50c:	0e 94 b9 00 	call	0x172	; 0x172 <initADC>
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	74 e0       	ldi	r23, 0x04	; 4
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <initPWM>
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	94 e0       	ldi	r25, 0x04	; 4
 520:	0e 94 cf 01 	call	0x39e	; 0x39e <initInputCapture>
 524:	80 e8       	ldi	r24, 0x80	; 128
 526:	95 e2       	ldi	r25, 0x25	; 37
 528:	0e 94 2e 02 	call	0x45c	; 0x45c <initUSART>
 52c:	78 94       	sei
 52e:	0f 2e       	mov	r0, r31
 530:	f0 e4       	ldi	r31, 0x40	; 64
 532:	cf 2e       	mov	r12, r31
 534:	f2 e4       	ldi	r31, 0x42	; 66
 536:	df 2e       	mov	r13, r31
 538:	ff e0       	ldi	r31, 0x0F	; 15
 53a:	ef 2e       	mov	r14, r31
 53c:	f1 2c       	mov	r15, r1
 53e:	f0 2d       	mov	r31, r0
 540:	c1 e0       	ldi	r28, 0x01	; 1
 542:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ISR_TMR1CAPT>
 546:	88 23       	and	r24, r24
 548:	09 f4       	brne	.+2      	; 0x54c <main+0x5e>
 54a:	8d c0       	rjmp	.+282    	; 0x666 <main+0x178>
 54c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lastInterruptChannel>
 550:	88 23       	and	r24, r24
 552:	21 f0       	breq	.+8      	; 0x55c <main+0x6e>
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	09 f4       	brne	.+2      	; 0x55a <main+0x6c>
 558:	43 c0       	rjmp	.+134    	; 0x5e0 <main+0xf2>
 55a:	83 c0       	rjmp	.+262    	; 0x662 <main+0x174>
 55c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <prevCaptTimeCHA>
 560:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <prevCaptTimeCHA+0x1>
 564:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <inCaptTimeCHA>
 568:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <inCaptTimeCHA+0x1>
 56c:	82 17       	cp	r24, r18
 56e:	93 07       	cpc	r25, r19
 570:	78 f4       	brcc	.+30     	; 0x590 <main+0xa2>
 572:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <inCaptTimeCHA>
 576:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <inCaptTimeCHA+0x1>
 57a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <prevCaptTimeCHA>
 57e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <prevCaptTimeCHA+0x1>
 582:	82 1b       	sub	r24, r18
 584:	93 0b       	sbc	r25, r19
 586:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <deltaTimeCHA+0x1>
 58a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <deltaTimeCHA>
 58e:	0e c0       	rjmp	.+28     	; 0x5ac <main+0xbe>
 590:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <inCaptTimeCHA>
 594:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <inCaptTimeCHA+0x1>
 598:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <prevCaptTimeCHA>
 59c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <prevCaptTimeCHA+0x1>
 5a0:	82 1b       	sub	r24, r18
 5a2:	93 0b       	sbc	r25, r19
 5a4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <deltaTimeCHA+0x1>
 5a8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <deltaTimeCHA>
 5ac:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <deltaTimeCHA>
 5b0:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <deltaTimeCHA+0x1>
 5b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <inCaptTimeUnit>
 5b8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <inCaptTimeUnit+0x1>
 5bc:	48 9f       	mul	r20, r24
 5be:	90 01       	movw	r18, r0
 5c0:	49 9f       	mul	r20, r25
 5c2:	30 0d       	add	r19, r0
 5c4:	58 9f       	mul	r21, r24
 5c6:	30 0d       	add	r19, r0
 5c8:	11 24       	eor	r1, r1
 5ca:	40 e0       	ldi	r20, 0x00	; 0
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	c7 01       	movw	r24, r14
 5d0:	b6 01       	movw	r22, r12
 5d2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__divmodsi4>
 5d6:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <HZCHA+0x1>
 5da:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <HZCHA>
 5de:	41 c0       	rjmp	.+130    	; 0x662 <main+0x174>
 5e0:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <prevCaptTimeCHB>
 5e4:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <prevCaptTimeCHB+0x1>
 5e8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <inCaptTimeCHB>
 5ec:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <inCaptTimeCHB+0x1>
 5f0:	82 17       	cp	r24, r18
 5f2:	93 07       	cpc	r25, r19
 5f4:	78 f4       	brcc	.+30     	; 0x614 <main+0x126>
 5f6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <inCaptTimeCHB>
 5fa:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <inCaptTimeCHB+0x1>
 5fe:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <prevCaptTimeCHB>
 602:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <prevCaptTimeCHB+0x1>
 606:	82 1b       	sub	r24, r18
 608:	93 0b       	sbc	r25, r19
 60a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <deltaTimeCHB+0x1>
 60e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <deltaTimeCHB>
 612:	0e c0       	rjmp	.+28     	; 0x630 <main+0x142>
 614:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <inCaptTimeCHB>
 618:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <inCaptTimeCHB+0x1>
 61c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <prevCaptTimeCHB>
 620:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <prevCaptTimeCHB+0x1>
 624:	82 1b       	sub	r24, r18
 626:	93 0b       	sbc	r25, r19
 628:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <deltaTimeCHB+0x1>
 62c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <deltaTimeCHB>
 630:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <deltaTimeCHB>
 634:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <deltaTimeCHB+0x1>
 638:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <inCaptTimeUnit>
 63c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <inCaptTimeUnit+0x1>
 640:	48 9f       	mul	r20, r24
 642:	90 01       	movw	r18, r0
 644:	49 9f       	mul	r20, r25
 646:	30 0d       	add	r19, r0
 648:	58 9f       	mul	r21, r24
 64a:	30 0d       	add	r19, r0
 64c:	11 24       	eor	r1, r1
 64e:	40 e0       	ldi	r20, 0x00	; 0
 650:	50 e0       	ldi	r21, 0x00	; 0
 652:	c7 01       	movw	r24, r14
 654:	b6 01       	movw	r22, r12
 656:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__divmodsi4>
 65a:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <HZCHB+0x1>
 65e:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <HZCHB>
 662:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <ISR_TMR1CAPT>
 666:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <ISR_ADC>
 66a:	88 23       	and	r24, r24
 66c:	41 f1       	breq	.+80     	; 0x6be <main+0x1d0>
 66e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	69 f0       	breq	.+26     	; 0x690 <main+0x1a2>
 676:	18 f0       	brcs	.+6      	; 0x67e <main+0x190>
 678:	82 30       	cpi	r24, 0x02	; 2
 67a:	99 f0       	breq	.+38     	; 0x6a2 <main+0x1b4>
 67c:	1b c0       	rjmp	.+54     	; 0x6b4 <main+0x1c6>
 67e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <result_ADC>
 682:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <result_ADC+0x1>
 686:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <temperatureHBridge+0x1>
 68a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <temperatureHBridge>
 68e:	15 c0       	rjmp	.+42     	; 0x6ba <main+0x1cc>
 690:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <result_ADC>
 694:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <result_ADC+0x1>
 698:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <temperatureMotor+0x1>
 69c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temperatureMotor>
 6a0:	0c c0       	rjmp	.+24     	; 0x6ba <main+0x1cc>
 6a2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <result_ADC>
 6a6:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <result_ADC+0x1>
 6aa:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <currentHBridge+0x1>
 6ae:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <currentHBridge>
 6b2:	03 c0       	rjmp	.+6      	; 0x6ba <main+0x1cc>
 6b4:	8a e0       	ldi	r24, 0x0A	; 10
 6b6:	0e 94 c6 00 	call	0x18c	; 0x18c <setError>
 6ba:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <ISR_ADC>
 6be:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <RXBufferAmount>
 6c2:	88 23       	and	r24, r24
 6c4:	b9 f0       	breq	.+46     	; 0x6f4 <main+0x206>
 6c6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <RXBufferOutPos>
 6ca:	88 30       	cpi	r24, 0x08	; 8
 6cc:	30 f4       	brcc	.+12     	; 0x6da <main+0x1ec>
 6ce:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <RXBufferOutPos>
 6d2:	8f 5f       	subi	r24, 0xFF	; 255
 6d4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <RXBufferOutPos>
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <main+0x1f0>
 6da:	c0 93 38 01 	sts	0x0138, r28	; 0x800138 <RXBufferOutPos>
 6de:	62 ed       	ldi	r22, 0xD2	; 210
 6e0:	74 e0       	ldi	r23, 0x04	; 4
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 3b 02 	call	0x476	; 0x476 <transmitUSART>
 6ea:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <RXBufferAmount>
 6ee:	81 50       	subi	r24, 0x01	; 1
 6f0:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <RXBufferAmount>
 6f4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <ISR_ADC>
 6f8:	81 11       	cpse	r24, r1
 6fa:	23 cf       	rjmp	.-442    	; 0x542 <main+0x54>
 6fc:	0e 94 cf 00 	call	0x19e	; 0x19e <startADC>
 700:	20 cf       	rjmp	.-448    	; 0x542 <main+0x54>

00000702 <__vector_1>:
////////////////////////////// END FUNCTIONS DEFINITIONS //////////////////////////

////////////////////////////// ISRs //////////////////////////
ISR(INT0_vect){									// External Interrupt Request 0
 702:	1f 92       	push	r1
 704:	0f 92       	push	r0
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	0f 92       	push	r0
 70a:	11 24       	eor	r1, r1
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
	pulsesEncCHA ++;
 714:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <pulsesEncCHA>
 718:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <pulsesEncCHA+0x1>
 71c:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <pulsesEncCHA+0x2>
 720:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <pulsesEncCHA+0x3>
 724:	01 96       	adiw	r24, 0x01	; 1
 726:	a1 1d       	adc	r26, r1
 728:	b1 1d       	adc	r27, r1
 72a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <pulsesEncCHA>
 72e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <pulsesEncCHA+0x1>
 732:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <pulsesEncCHA+0x2>
 736:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <pulsesEncCHA+0x3>
	lastInterruptChannel = 0;
 73a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <lastInterruptChannel>
}
 73e:	bf 91       	pop	r27
 740:	af 91       	pop	r26
 742:	9f 91       	pop	r25
 744:	8f 91       	pop	r24
 746:	0f 90       	pop	r0
 748:	0f be       	out	0x3f, r0	; 63
 74a:	0f 90       	pop	r0
 74c:	1f 90       	pop	r1
 74e:	18 95       	reti

00000750 <__vector_2>:
ISR(INT1_vect){									// External Interrupt Request 1
 750:	1f 92       	push	r1
 752:	0f 92       	push	r0
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	0f 92       	push	r0
 758:	11 24       	eor	r1, r1
 75a:	8f 93       	push	r24
 75c:	9f 93       	push	r25
 75e:	af 93       	push	r26
 760:	bf 93       	push	r27
	pulsesEncCHB ++;
 762:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <pulsesEncCHB>
 766:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <pulsesEncCHB+0x1>
 76a:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <pulsesEncCHB+0x2>
 76e:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <pulsesEncCHB+0x3>
 772:	01 96       	adiw	r24, 0x01	; 1
 774:	a1 1d       	adc	r26, r1
 776:	b1 1d       	adc	r27, r1
 778:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <pulsesEncCHB>
 77c:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <pulsesEncCHB+0x1>
 780:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <pulsesEncCHB+0x2>
 784:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <pulsesEncCHB+0x3>
	lastInterruptChannel = 1;
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <lastInterruptChannel>
}
 78e:	bf 91       	pop	r27
 790:	af 91       	pop	r26
 792:	9f 91       	pop	r25
 794:	8f 91       	pop	r24
 796:	0f 90       	pop	r0
 798:	0f be       	out	0x3f, r0	; 63
 79a:	0f 90       	pop	r0
 79c:	1f 90       	pop	r1
 79e:	18 95       	reti

000007a0 <__vector_3>:
ISR(PCINT0_vect){								// Pin Change Interrupt Request 0
 7a0:	1f 92       	push	r1
 7a2:	0f 92       	push	r0
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	0f 92       	push	r0
 7a8:	11 24       	eor	r1, r1
	ISR_PCINT0 = 0;
 7aa:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <ISR_PCINT0>
}
 7ae:	0f 90       	pop	r0
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	0f 90       	pop	r0
 7b4:	1f 90       	pop	r1
 7b6:	18 95       	reti

000007b8 <__vector_4>:
ISR(PCINT1_vect){								// Pin Change Interrupt Request 1
 7b8:	1f 92       	push	r1
 7ba:	0f 92       	push	r0
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	0f 92       	push	r0
 7c0:	11 24       	eor	r1, r1
	ISR_PCINT1 = 0;
 7c2:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <ISR_PCINT1>
}
 7c6:	0f 90       	pop	r0
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	0f 90       	pop	r0
 7cc:	1f 90       	pop	r1
 7ce:	18 95       	reti

000007d0 <__vector_5>:
ISR(PCINT2_vect){								// Pin Change Interrupt Request 2
 7d0:	1f 92       	push	r1
 7d2:	0f 92       	push	r0
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	0f 92       	push	r0
 7d8:	11 24       	eor	r1, r1
	ISR_PCINT2 = 0;
 7da:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <ISR_PCINT2>
}
 7de:	0f 90       	pop	r0
 7e0:	0f be       	out	0x3f, r0	; 63
 7e2:	0f 90       	pop	r0
 7e4:	1f 90       	pop	r1
 7e6:	18 95       	reti

000007e8 <__vector_6>:
ISR(WDT_vect){									// Watchdog Time-out Interrupt
 7e8:	1f 92       	push	r1
 7ea:	0f 92       	push	r0
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	0f 92       	push	r0
 7f0:	11 24       	eor	r1, r1
	ISR_WDT = 0;
 7f2:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <ISR_WDT>
}
 7f6:	0f 90       	pop	r0
 7f8:	0f be       	out	0x3f, r0	; 63
 7fa:	0f 90       	pop	r0
 7fc:	1f 90       	pop	r1
 7fe:	18 95       	reti

00000800 <__vector_7>:
ISR(TIMER2_COMPA_vect){							// Timer/Counter 2 Compare Match A
 800:	1f 92       	push	r1
 802:	0f 92       	push	r0
 804:	0f b6       	in	r0, 0x3f	; 63
 806:	0f 92       	push	r0
 808:	11 24       	eor	r1, r1
 80a:	2f 93       	push	r18
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	af 93       	push	r26
 812:	bf 93       	push	r27
	microsSeconds += TIMEUNIT;					// Increment the number of microseconds by the TIMEUNIT
 814:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <microsSeconds>
 818:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <microsSeconds+0x1>
 81c:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <microsSeconds+0x2>
 820:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <microsSeconds+0x3>
 824:	0a 96       	adiw	r24, 0x0a	; 10
 826:	a1 1d       	adc	r26, r1
 828:	b1 1d       	adc	r27, r1
 82a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <microsSeconds>
 82e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <microsSeconds+0x1>
 832:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <microsSeconds+0x2>
 836:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <microsSeconds+0x3>
	micros1000s += TIMEUNIT;					// Increment rolling counter by TIMEUNIT
 83a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <micros1000s>
 83e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <micros1000s+0x1>
 842:	0a 96       	adiw	r24, 0x0a	; 10
 844:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <micros1000s+0x1>
 848:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <micros1000s>
	if (micros1000s>=1000){
 84c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <micros1000s>
 850:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <micros1000s+0x1>
 854:	88 3e       	cpi	r24, 0xE8	; 232
 856:	93 40       	sbci	r25, 0x03	; 3
 858:	e8 f0       	brcs	.+58     	; 0x894 <__vector_7+0x94>
		millisSeconds++;						// Increments milliseconds counter every 1000s of microseconds
 85a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <millisSeconds>
 85e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <millisSeconds+0x1>
 862:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <millisSeconds+0x2>
 866:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <millisSeconds+0x3>
 86a:	01 96       	adiw	r24, 0x01	; 1
 86c:	a1 1d       	adc	r26, r1
 86e:	b1 1d       	adc	r27, r1
 870:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <millisSeconds>
 874:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <millisSeconds+0x1>
 878:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <millisSeconds+0x2>
 87c:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <millisSeconds+0x3>
		micros1000s -= 1000;					// Adds the any extra microseconds to the rolling counter
 880:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <micros1000s>
 884:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <micros1000s+0x1>
 888:	88 5e       	subi	r24, 0xE8	; 232
 88a:	93 40       	sbci	r25, 0x03	; 3
 88c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <micros1000s+0x1>
 890:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <micros1000s>
	}
}
 894:	bf 91       	pop	r27
 896:	af 91       	pop	r26
 898:	9f 91       	pop	r25
 89a:	8f 91       	pop	r24
 89c:	2f 91       	pop	r18
 89e:	0f 90       	pop	r0
 8a0:	0f be       	out	0x3f, r0	; 63
 8a2:	0f 90       	pop	r0
 8a4:	1f 90       	pop	r1
 8a6:	18 95       	reti

000008a8 <__vector_8>:
ISR(TIMER2_COMPB_vect){							// Timer/Counter 2 Compare Match B
 8a8:	1f 92       	push	r1
 8aa:	0f 92       	push	r0
 8ac:	0f b6       	in	r0, 0x3f	; 63
 8ae:	0f 92       	push	r0
 8b0:	11 24       	eor	r1, r1
	ISR_TMR2CB = 0;
 8b2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <ISR_TMR2CB>
}
 8b6:	0f 90       	pop	r0
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	0f 90       	pop	r0
 8bc:	1f 90       	pop	r1
 8be:	18 95       	reti

000008c0 <__vector_9>:
ISR(TIMER2_OVF_vect){							// Timer/Counter 2 Overflow
 8c0:	1f 92       	push	r1
 8c2:	0f 92       	push	r0
 8c4:	0f b6       	in	r0, 0x3f	; 63
 8c6:	0f 92       	push	r0
 8c8:	11 24       	eor	r1, r1
	ISR_TMR2OVF = 0;
 8ca:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <ISR_TMR2OVF>
}
 8ce:	0f 90       	pop	r0
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	0f 90       	pop	r0
 8d4:	1f 90       	pop	r1
 8d6:	18 95       	reti

000008d8 <__vector_10>:
ISR(TIMER1_CAPT_vect){							// Timer/Counter 1 Capture Event
 8d8:	1f 92       	push	r1
 8da:	0f 92       	push	r0
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	0f 92       	push	r0
 8e0:	11 24       	eor	r1, r1
 8e2:	8f 93       	push	r24
 8e4:	9f 93       	push	r25
	ISR_TMR1CAPT = 1;
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <ISR_TMR1CAPT>
	switch (lastInterruptChannel){				// Check which encoder channel sent triggered the Input Capture
 8ec:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <lastInterruptChannel>
 8f0:	88 23       	and	r24, r24
 8f2:	19 f0       	breq	.+6      	; 0x8fa <__vector_10+0x22>
 8f4:	81 30       	cpi	r24, 0x01	; 1
 8f6:	91 f0       	breq	.+36     	; 0x91c <__stack+0x1d>
 8f8:	21 c0       	rjmp	.+66     	; 0x93c <__stack+0x3d>
		case 0:
			prevCaptTimeCHA = inCaptTimeCHA;	// Move current timestamp to the previous one
 8fa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <inCaptTimeCHA>
 8fe:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <inCaptTimeCHA+0x1>
 902:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <prevCaptTimeCHA+0x1>
 906:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <prevCaptTimeCHA>
			inCaptTimeCHA = ICR1;				// Update current timestamp
 90a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 90e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 912:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <inCaptTimeCHA+0x1>
 916:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <inCaptTimeCHA>
		break;
 91a:	10 c0       	rjmp	.+32     	; 0x93c <__stack+0x3d>
		case 1:
			prevCaptTimeCHB = inCaptTimeCHB;	// Move current timestamp to the previous one
 91c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <inCaptTimeCHB>
 920:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <inCaptTimeCHB+0x1>
 924:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <prevCaptTimeCHB+0x1>
 928:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <prevCaptTimeCHB>
			inCaptTimeCHB = ICR1;				// Update current timestamp
 92c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 930:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 934:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <inCaptTimeCHB+0x1>
 938:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <inCaptTimeCHB>
		break;
	}
}
 93c:	9f 91       	pop	r25
 93e:	8f 91       	pop	r24
 940:	0f 90       	pop	r0
 942:	0f be       	out	0x3f, r0	; 63
 944:	0f 90       	pop	r0
 946:	1f 90       	pop	r1
 948:	18 95       	reti

0000094a <__vector_11>:
ISR(TIMER1_COMPA_vect){							// Timer/Counter 1 Compare Match A
 94a:	1f 92       	push	r1
 94c:	0f 92       	push	r0
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	0f 92       	push	r0
 952:	11 24       	eor	r1, r1
	ISR_TMR1CA = 0;
 954:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <ISR_TMR1CA>
}
 958:	0f 90       	pop	r0
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	0f 90       	pop	r0
 95e:	1f 90       	pop	r1
 960:	18 95       	reti

00000962 <__vector_12>:
ISR(TIMER1_COMPB_vect){							// Timer/Counter 1 Compare Match B
 962:	1f 92       	push	r1
 964:	0f 92       	push	r0
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	0f 92       	push	r0
 96a:	11 24       	eor	r1, r1
	ISR_TMR1CB = 0;
 96c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <ISR_TMR1CB>
}
 970:	0f 90       	pop	r0
 972:	0f be       	out	0x3f, r0	; 63
 974:	0f 90       	pop	r0
 976:	1f 90       	pop	r1
 978:	18 95       	reti

0000097a <__vector_13>:
ISR(TIMER1_OVF_vect){							// Timer/Counter 1 Overflow
 97a:	1f 92       	push	r1
 97c:	0f 92       	push	r0
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	0f 92       	push	r0
 982:	11 24       	eor	r1, r1
 984:	8f 93       	push	r24
	ISR_TMR1OVF = 1;
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <ISR_TMR1OVF>
}
 98c:	8f 91       	pop	r24
 98e:	0f 90       	pop	r0
 990:	0f be       	out	0x3f, r0	; 63
 992:	0f 90       	pop	r0
 994:	1f 90       	pop	r1
 996:	18 95       	reti

00000998 <__vector_14>:
ISR(TIMER0_COMPA_vect){							// Timer/Counter 0 Compare Match A
 998:	1f 92       	push	r1
 99a:	0f 92       	push	r0
 99c:	0f b6       	in	r0, 0x3f	; 63
 99e:	0f 92       	push	r0
 9a0:	11 24       	eor	r1, r1
	ISR_TMR0CA = 0;
 9a2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <ISR_TMR0CA>
}
 9a6:	0f 90       	pop	r0
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	0f 90       	pop	r0
 9ac:	1f 90       	pop	r1
 9ae:	18 95       	reti

000009b0 <__vector_15>:
ISR(TIMER0_COMPB_vect){							// Timer/Counter 0 Compare Match B
 9b0:	1f 92       	push	r1
 9b2:	0f 92       	push	r0
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	0f 92       	push	r0
 9b8:	11 24       	eor	r1, r1
	ISR_TMR0CB = 0;
 9ba:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <ISR_TMR0CB>
}
 9be:	0f 90       	pop	r0
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	0f 90       	pop	r0
 9c4:	1f 90       	pop	r1
 9c6:	18 95       	reti

000009c8 <__vector_16>:
ISR(TIMER0_OVF_vect){							// Timer/Counter 0 Overflow
 9c8:	1f 92       	push	r1
 9ca:	0f 92       	push	r0
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	0f 92       	push	r0
 9d0:	11 24       	eor	r1, r1
	ISR_TMR0OVF = 0;
 9d2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <ISR_TMR0OVF>
}
 9d6:	0f 90       	pop	r0
 9d8:	0f be       	out	0x3f, r0	; 63
 9da:	0f 90       	pop	r0
 9dc:	1f 90       	pop	r1
 9de:	18 95       	reti

000009e0 <__vector_17>:
ISR(SPI_STC_vect){								// SPI Serial Transfer Complete
 9e0:	1f 92       	push	r1
 9e2:	0f 92       	push	r0
 9e4:	0f b6       	in	r0, 0x3f	; 63
 9e6:	0f 92       	push	r0
 9e8:	11 24       	eor	r1, r1
	ISR_SPI = 0;
 9ea:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <ISR_SPI>
}
 9ee:	0f 90       	pop	r0
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	0f 90       	pop	r0
 9f4:	1f 90       	pop	r1
 9f6:	18 95       	reti

000009f8 <__vector_18>:
ISR(USART_RX_vect){								// USART Rx Complete
 9f8:	1f 92       	push	r1
 9fa:	0f 92       	push	r0
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	0f 92       	push	r0
 a00:	11 24       	eor	r1, r1
 a02:	2f 93       	push	r18
 a04:	3f 93       	push	r19
 a06:	4f 93       	push	r20
 a08:	5f 93       	push	r21
 a0a:	6f 93       	push	r22
 a0c:	7f 93       	push	r23
 a0e:	8f 93       	push	r24
 a10:	9f 93       	push	r25
 a12:	af 93       	push	r26
 a14:	bf 93       	push	r27
 a16:	ef 93       	push	r30
 a18:	ff 93       	push	r31
	ISR_USARTRX = 0;							// Incoming RX flag
 a1a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <ISR_USARTRX>
	if(RXBufferAmount >= RXBufferSize){
 a1e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <RXBufferAmount>
 a22:	88 30       	cpi	r24, 0x08	; 8
 a24:	20 f0       	brcs	.+8      	; 0xa2e <__vector_18+0x36>
		setError(USART_RX_BUFFER_FULL);
 a26:	89 e2       	ldi	r24, 0x29	; 41
 a28:	0e 94 c6 00 	call	0x18c	; 0x18c <setError>
 a2c:	27 c0       	rjmp	.+78     	; 0xa7c <__vector_18+0x84>
	}else{
		if((RXBufferOutPos+RXBufferAmount) < RXBufferSize){
 a2e:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <RXBufferOutPos>
 a32:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <RXBufferAmount>
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	82 0f       	add	r24, r18
 a3a:	91 1d       	adc	r25, r1
 a3c:	08 97       	sbiw	r24, 0x08	; 8
 a3e:	6c f4       	brge	.+26     	; 0xa5a <__vector_18+0x62>
			RXData[RXBufferOutPos+RXBufferAmount] = UDR0;	// Transfer register value to RX Buffer
 a40:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <RXBufferOutPos>
 a44:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <RXBufferAmount>
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	e8 0f       	add	r30, r24
 a4c:	f1 1d       	adc	r31, r1
 a4e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 a52:	ef 5a       	subi	r30, 0xAF	; 175
 a54:	fe 4f       	sbci	r31, 0xFE	; 254
 a56:	80 83       	st	Z, r24
 a58:	0c c0       	rjmp	.+24     	; 0xa72 <__vector_18+0x7a>
		}else{
			RXData[(RXBufferOutPos+RXBufferAmount)-RXBufferSize] = UDR0;		// Transfer register value to RX Buffer
 a5a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <RXBufferOutPos>
 a5e:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <RXBufferAmount>
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	e8 0f       	add	r30, r24
 a66:	f1 1d       	adc	r31, r1
 a68:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 a6c:	e7 5b       	subi	r30, 0xB7	; 183
 a6e:	fe 4f       	sbci	r31, 0xFE	; 254
 a70:	80 83       	st	Z, r24
		}
		RXBufferAmount ++;						// Increment element counter
 a72:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <RXBufferAmount>
 a76:	8f 5f       	subi	r24, 0xFF	; 255
 a78:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <RXBufferAmount>
	}
}
 a7c:	ff 91       	pop	r31
 a7e:	ef 91       	pop	r30
 a80:	bf 91       	pop	r27
 a82:	af 91       	pop	r26
 a84:	9f 91       	pop	r25
 a86:	8f 91       	pop	r24
 a88:	7f 91       	pop	r23
 a8a:	6f 91       	pop	r22
 a8c:	5f 91       	pop	r21
 a8e:	4f 91       	pop	r20
 a90:	3f 91       	pop	r19
 a92:	2f 91       	pop	r18
 a94:	0f 90       	pop	r0
 a96:	0f be       	out	0x3f, r0	; 63
 a98:	0f 90       	pop	r0
 a9a:	1f 90       	pop	r1
 a9c:	18 95       	reti

00000a9e <__vector_19>:
ISR(USART_UDRE_vect){							// USART Data Register Empty
 a9e:	1f 92       	push	r1
 aa0:	0f 92       	push	r0
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	0f 92       	push	r0
 aa6:	11 24       	eor	r1, r1
	ISR_USARTUDRE = 0;
 aa8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <ISR_USARTUDRE>
}
 aac:	0f 90       	pop	r0
 aae:	0f be       	out	0x3f, r0	; 63
 ab0:	0f 90       	pop	r0
 ab2:	1f 90       	pop	r1
 ab4:	18 95       	reti

00000ab6 <__vector_20>:
ISR(USART_TX_vect){								// USART TX Complete
 ab6:	1f 92       	push	r1
 ab8:	0f 92       	push	r0
 aba:	0f b6       	in	r0, 0x3f	; 63
 abc:	0f 92       	push	r0
 abe:	11 24       	eor	r1, r1
	ISR_USARTTX = 0;
 ac0:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <ISR_USARTTX>
}
 ac4:	0f 90       	pop	r0
 ac6:	0f be       	out	0x3f, r0	; 63
 ac8:	0f 90       	pop	r0
 aca:	1f 90       	pop	r1
 acc:	18 95       	reti

00000ace <__vector_21>:
ISR(ADC_vect){									// ADC Conversion Complete
 ace:	1f 92       	push	r1
 ad0:	0f 92       	push	r0
 ad2:	0f b6       	in	r0, 0x3f	; 63
 ad4:	0f 92       	push	r0
 ad6:	11 24       	eor	r1, r1
 ad8:	8f 93       	push	r24
 ada:	9f 93       	push	r25
	result_ADC = ADC;
 adc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 ae0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 ae4:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <result_ADC+0x1>
 ae8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <result_ADC>
	ISR_ADC = 1;
 aec:	81 e0       	ldi	r24, 0x01	; 1
 aee:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <ISR_ADC>
}
 af2:	9f 91       	pop	r25
 af4:	8f 91       	pop	r24
 af6:	0f 90       	pop	r0
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	0f 90       	pop	r0
 afc:	1f 90       	pop	r1
 afe:	18 95       	reti

00000b00 <__vector_22>:
ISR(EE_READY_vect){								// EEPROM Ready
 b00:	1f 92       	push	r1
 b02:	0f 92       	push	r0
 b04:	0f b6       	in	r0, 0x3f	; 63
 b06:	0f 92       	push	r0
 b08:	11 24       	eor	r1, r1
	ISR_EEREADY = 0;
 b0a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <ISR_EEREADY>
}
 b0e:	0f 90       	pop	r0
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	0f 90       	pop	r0
 b14:	1f 90       	pop	r1
 b16:	18 95       	reti

00000b18 <__vector_23>:
ISR(ANALOG_COMP_vect){							// Analog Comparator
 b18:	1f 92       	push	r1
 b1a:	0f 92       	push	r0
 b1c:	0f b6       	in	r0, 0x3f	; 63
 b1e:	0f 92       	push	r0
 b20:	11 24       	eor	r1, r1
	ISR_ANALOGCOMP = 0;
 b22:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <ISR_ANALOGCOMP>
}
 b26:	0f 90       	pop	r0
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	0f 90       	pop	r0
 b2c:	1f 90       	pop	r1
 b2e:	18 95       	reti

00000b30 <__vector_24>:
ISR(TWI_vect){									// 2-wire Serial Interface
 b30:	1f 92       	push	r1
 b32:	0f 92       	push	r0
 b34:	0f b6       	in	r0, 0x3f	; 63
 b36:	0f 92       	push	r0
 b38:	11 24       	eor	r1, r1
 b3a:	2f 93       	push	r18
 b3c:	3f 93       	push	r19
 b3e:	4f 93       	push	r20
 b40:	5f 93       	push	r21
 b42:	6f 93       	push	r22
 b44:	7f 93       	push	r23
 b46:	8f 93       	push	r24
 b48:	9f 93       	push	r25
 b4a:	af 93       	push	r26
 b4c:	bf 93       	push	r27
 b4e:	ef 93       	push	r30
 b50:	ff 93       	push	r31
	ISR_TWI = 0;
 b52:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <ISR_TWI>
	switch(TWSR & 0b11111100){					// Masking prescaler bits in TWSR
 b56:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 b5a:	e8 2f       	mov	r30, r24
 b5c:	ec 7f       	andi	r30, 0xFC	; 252
 b5e:	8e 2f       	mov	r24, r30
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	fc 01       	movw	r30, r24
 b64:	38 97       	sbiw	r30, 0x08	; 8
 b66:	ef 31       	cpi	r30, 0x1F	; 31
 b68:	f1 05       	cpc	r31, r1
 b6a:	30 f5       	brcc	.+76     	; 0xbb8 <__vector_24+0x88>
 b6c:	ec 5c       	subi	r30, 0xCC	; 204
 b6e:	ff 4f       	sbci	r31, 0xFF	; 255
 b70:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__tablejump2__>
		case 8:									// A START condition has been transmitted
			TWDR = I2CRemoteAddress;
 b74:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <I2CRemoteAddress>
 b78:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			TWCR |= (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT);
 b7c:	ec eb       	ldi	r30, 0xBC	; 188
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	80 81       	ld	r24, Z
 b82:	80 68       	ori	r24, 0x80	; 128
 b84:	80 83       	st	Z, r24
		break;
 b86:	1b c0       	rjmp	.+54     	; 0xbbe <__vector_24+0x8e>
		case 10:								// A repeated START condition has been transmitted
		break;
		case 18:								// SLA+W has been transmitted; ACK has been received
			TWDR = I2CData;
 b88:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <I2CData>
 b8c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			TWCR |= (0<<TWSTA) | (0<<TWSTO) | (1<<TWINT);
 b90:	ec eb       	ldi	r30, 0xBC	; 188
 b92:	f0 e0       	ldi	r31, 0x00	; 0
 b94:	80 81       	ld	r24, Z
 b96:	80 68       	ori	r24, 0x80	; 128
 b98:	80 83       	st	Z, r24
		break;
 b9a:	11 c0       	rjmp	.+34     	; 0xbbe <__vector_24+0x8e>
		case 20:								// SLA+W has been transmitted; NOT ACK has been received
			setError(I2C_SLA_NOK_RESPONSE);
 b9c:	8f e1       	ldi	r24, 0x1F	; 31
 b9e:	0e 94 c6 00 	call	0x18c	; 0x18c <setError>
		break;
 ba2:	0d c0       	rjmp	.+26     	; 0xbbe <__vector_24+0x8e>
		case 28:								// Data byte has been transmitted; ACK has been received
			TWCR |= (0<<TWSTA) | (1<<TWSTO) | (1<<TWINT);
 ba4:	ec eb       	ldi	r30, 0xBC	; 188
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	80 81       	ld	r24, Z
 baa:	80 69       	ori	r24, 0x90	; 144
 bac:	80 83       	st	Z, r24
		break;
 bae:	07 c0       	rjmp	.+14     	; 0xbbe <__vector_24+0x8e>
		case 30:								// Data byte has been transmitted; NOT ACK has been received
			setError(I2C_DATA_NOK_RESPONSE);
 bb0:	80 e2       	ldi	r24, 0x20	; 32
 bb2:	0e 94 c6 00 	call	0x18c	; 0x18c <setError>
		break;
 bb6:	03 c0       	rjmp	.+6      	; 0xbbe <__vector_24+0x8e>
		case 38:								// Arbitration lost in SLA+W or data bytes
		break;
		default:
			setError(I2C_UNKNOWN_ERROR);
 bb8:	81 e2       	ldi	r24, 0x21	; 33
 bba:	0e 94 c6 00 	call	0x18c	; 0x18c <setError>
		break;		
	}
}
 bbe:	ff 91       	pop	r31
 bc0:	ef 91       	pop	r30
 bc2:	bf 91       	pop	r27
 bc4:	af 91       	pop	r26
 bc6:	9f 91       	pop	r25
 bc8:	8f 91       	pop	r24
 bca:	7f 91       	pop	r23
 bcc:	6f 91       	pop	r22
 bce:	5f 91       	pop	r21
 bd0:	4f 91       	pop	r20
 bd2:	3f 91       	pop	r19
 bd4:	2f 91       	pop	r18
 bd6:	0f 90       	pop	r0
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	0f 90       	pop	r0
 bdc:	1f 90       	pop	r1
 bde:	18 95       	reti

00000be0 <__vector_25>:
ISR(SPM_READY_vect){							// Store Program Memory Ready
 be0:	1f 92       	push	r1
 be2:	0f 92       	push	r0
 be4:	0f b6       	in	r0, 0x3f	; 63
 be6:	0f 92       	push	r0
 be8:	11 24       	eor	r1, r1
	ISR_SPM = 0;
 bea:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <ISR_SPM>
}
 bee:	0f 90       	pop	r0
 bf0:	0f be       	out	0x3f, r0	; 63
 bf2:	0f 90       	pop	r0
 bf4:	1f 90       	pop	r1
 bf6:	18 95       	reti

00000bf8 <__udivmodsi4>:
 bf8:	a1 e2       	ldi	r26, 0x21	; 33
 bfa:	1a 2e       	mov	r1, r26
 bfc:	aa 1b       	sub	r26, r26
 bfe:	bb 1b       	sub	r27, r27
 c00:	fd 01       	movw	r30, r26
 c02:	0d c0       	rjmp	.+26     	; 0xc1e <__udivmodsi4_ep>

00000c04 <__udivmodsi4_loop>:
 c04:	aa 1f       	adc	r26, r26
 c06:	bb 1f       	adc	r27, r27
 c08:	ee 1f       	adc	r30, r30
 c0a:	ff 1f       	adc	r31, r31
 c0c:	a2 17       	cp	r26, r18
 c0e:	b3 07       	cpc	r27, r19
 c10:	e4 07       	cpc	r30, r20
 c12:	f5 07       	cpc	r31, r21
 c14:	20 f0       	brcs	.+8      	; 0xc1e <__udivmodsi4_ep>
 c16:	a2 1b       	sub	r26, r18
 c18:	b3 0b       	sbc	r27, r19
 c1a:	e4 0b       	sbc	r30, r20
 c1c:	f5 0b       	sbc	r31, r21

00000c1e <__udivmodsi4_ep>:
 c1e:	66 1f       	adc	r22, r22
 c20:	77 1f       	adc	r23, r23
 c22:	88 1f       	adc	r24, r24
 c24:	99 1f       	adc	r25, r25
 c26:	1a 94       	dec	r1
 c28:	69 f7       	brne	.-38     	; 0xc04 <__udivmodsi4_loop>
 c2a:	60 95       	com	r22
 c2c:	70 95       	com	r23
 c2e:	80 95       	com	r24
 c30:	90 95       	com	r25
 c32:	9b 01       	movw	r18, r22
 c34:	ac 01       	movw	r20, r24
 c36:	bd 01       	movw	r22, r26
 c38:	cf 01       	movw	r24, r30
 c3a:	08 95       	ret

00000c3c <__divmodsi4>:
 c3c:	05 2e       	mov	r0, r21
 c3e:	97 fb       	bst	r25, 7
 c40:	1e f4       	brtc	.+6      	; 0xc48 <__divmodsi4+0xc>
 c42:	00 94       	com	r0
 c44:	0e 94 35 06 	call	0xc6a	; 0xc6a <__negsi2>
 c48:	57 fd       	sbrc	r21, 7
 c4a:	07 d0       	rcall	.+14     	; 0xc5a <__divmodsi4_neg2>
 c4c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__udivmodsi4>
 c50:	07 fc       	sbrc	r0, 7
 c52:	03 d0       	rcall	.+6      	; 0xc5a <__divmodsi4_neg2>
 c54:	4e f4       	brtc	.+18     	; 0xc68 <__divmodsi4_exit>
 c56:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__negsi2>

00000c5a <__divmodsi4_neg2>:
 c5a:	50 95       	com	r21
 c5c:	40 95       	com	r20
 c5e:	30 95       	com	r19
 c60:	21 95       	neg	r18
 c62:	3f 4f       	sbci	r19, 0xFF	; 255
 c64:	4f 4f       	sbci	r20, 0xFF	; 255
 c66:	5f 4f       	sbci	r21, 0xFF	; 255

00000c68 <__divmodsi4_exit>:
 c68:	08 95       	ret

00000c6a <__negsi2>:
 c6a:	90 95       	com	r25
 c6c:	80 95       	com	r24
 c6e:	70 95       	com	r23
 c70:	61 95       	neg	r22
 c72:	7f 4f       	sbci	r23, 0xFF	; 255
 c74:	8f 4f       	sbci	r24, 0xFF	; 255
 c76:	9f 4f       	sbci	r25, 0xFF	; 255
 c78:	08 95       	ret

00000c7a <__tablejump2__>:
 c7a:	ee 0f       	add	r30, r30
 c7c:	ff 1f       	adc	r31, r31
 c7e:	05 90       	lpm	r0, Z+
 c80:	f4 91       	lpm	r31, Z
 c82:	e0 2d       	mov	r30, r0
 c84:	09 94       	ijmp

00000c86 <__umulhisi3>:
 c86:	a2 9f       	mul	r26, r18
 c88:	b0 01       	movw	r22, r0
 c8a:	b3 9f       	mul	r27, r19
 c8c:	c0 01       	movw	r24, r0
 c8e:	a3 9f       	mul	r26, r19
 c90:	70 0d       	add	r23, r0
 c92:	81 1d       	adc	r24, r1
 c94:	11 24       	eor	r1, r1
 c96:	91 1d       	adc	r25, r1
 c98:	b2 9f       	mul	r27, r18
 c9a:	70 0d       	add	r23, r0
 c9c:	81 1d       	adc	r24, r1
 c9e:	11 24       	eor	r1, r1
 ca0:	91 1d       	adc	r25, r1
 ca2:	08 95       	ret

00000ca4 <__itoa_ncheck>:
 ca4:	bb 27       	eor	r27, r27
 ca6:	4a 30       	cpi	r20, 0x0A	; 10
 ca8:	31 f4       	brne	.+12     	; 0xcb6 <__itoa_ncheck+0x12>
 caa:	99 23       	and	r25, r25
 cac:	22 f4       	brpl	.+8      	; 0xcb6 <__itoa_ncheck+0x12>
 cae:	bd e2       	ldi	r27, 0x2D	; 45
 cb0:	90 95       	com	r25
 cb2:	81 95       	neg	r24
 cb4:	9f 4f       	sbci	r25, 0xFF	; 255
 cb6:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__utoa_common>

00000cba <__utoa_ncheck>:
 cba:	bb 27       	eor	r27, r27

00000cbc <__utoa_common>:
 cbc:	fb 01       	movw	r30, r22
 cbe:	55 27       	eor	r21, r21
 cc0:	aa 27       	eor	r26, r26
 cc2:	88 0f       	add	r24, r24
 cc4:	99 1f       	adc	r25, r25
 cc6:	aa 1f       	adc	r26, r26
 cc8:	a4 17       	cp	r26, r20
 cca:	10 f0       	brcs	.+4      	; 0xcd0 <__utoa_common+0x14>
 ccc:	a4 1b       	sub	r26, r20
 cce:	83 95       	inc	r24
 cd0:	50 51       	subi	r21, 0x10	; 16
 cd2:	b9 f7       	brne	.-18     	; 0xcc2 <__utoa_common+0x6>
 cd4:	a0 5d       	subi	r26, 0xD0	; 208
 cd6:	aa 33       	cpi	r26, 0x3A	; 58
 cd8:	08 f0       	brcs	.+2      	; 0xcdc <__utoa_common+0x20>
 cda:	a9 5d       	subi	r26, 0xD9	; 217
 cdc:	a1 93       	st	Z+, r26
 cde:	00 97       	sbiw	r24, 0x00	; 0
 ce0:	79 f7       	brne	.-34     	; 0xcc0 <__utoa_common+0x4>
 ce2:	b1 11       	cpse	r27, r1
 ce4:	b1 93       	st	Z+, r27
 ce6:	11 92       	st	Z+, r1
 ce8:	cb 01       	movw	r24, r22
 cea:	0c 94 77 06 	jmp	0xcee	; 0xcee <strrev>

00000cee <strrev>:
 cee:	dc 01       	movw	r26, r24
 cf0:	fc 01       	movw	r30, r24
 cf2:	67 2f       	mov	r22, r23
 cf4:	71 91       	ld	r23, Z+
 cf6:	77 23       	and	r23, r23
 cf8:	e1 f7       	brne	.-8      	; 0xcf2 <strrev+0x4>
 cfa:	32 97       	sbiw	r30, 0x02	; 2
 cfc:	04 c0       	rjmp	.+8      	; 0xd06 <strrev+0x18>
 cfe:	7c 91       	ld	r23, X
 d00:	6d 93       	st	X+, r22
 d02:	70 83       	st	Z, r23
 d04:	62 91       	ld	r22, -Z
 d06:	ae 17       	cp	r26, r30
 d08:	bf 07       	cpc	r27, r31
 d0a:	c8 f3       	brcs	.-14     	; 0xcfe <strrev+0x10>
 d0c:	08 95       	ret

00000d0e <_exit>:
 d0e:	f8 94       	cli

00000d10 <__stop_program>:
 d10:	ff cf       	rjmp	.-2      	; 0xd10 <__stop_program>
