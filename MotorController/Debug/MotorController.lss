
MotorController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000a8e  00000b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  0080011a  0080011a  00000b3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b1f  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007df  00000000  00000000  00002863  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb0  00000000  00000000  00003042  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  00003bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fb  00000000  00000000  00004124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001283  00000000  00000000  00004b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00005da2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__vector_1>
   8:	0c 94 c0 03 	jmp	0x780	; 0x780 <__vector_2>
   c:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__vector_3>
  10:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_4>
  14:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_5>
  18:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_6>
  1c:	0c 94 0b 04 	jmp	0x816	; 0x816 <__vector_7>
  20:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_8>
  24:	0c 94 23 04 	jmp	0x846	; 0x846 <__vector_9>
  28:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__vector_10>
  2c:	0c 94 3b 04 	jmp	0x876	; 0x876 <__vector_11>
  30:	0c 94 47 04 	jmp	0x88e	; 0x88e <__vector_12>
  34:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__vector_13>
  38:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__vector_14>
  3c:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__vector_15>
  40:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__vector_16>
  44:	0c 94 83 04 	jmp	0x906	; 0x906 <__vector_17>
  48:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__vector_18>
  4c:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_19>
  50:	0c 94 bb 04 	jmp	0x976	; 0x976 <__vector_20>
  54:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_21>
  58:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__vector_22>
  5c:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__vector_23>
  60:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__vector_24>
  64:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__vector_25>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3a       	cpi	r26, 0xA3	; 163
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4e 03 	call	0x69c	; 0x69c <main>
  9e:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <_exit>

000000a2 <timerINIT>:
		usart->rxBufferPTR->outputPosition--;									// Decrement number of elements in the buffer
	}else{
		setError(errorSignalPTR, ERROR_USART_RX_BUFFER_EMPTY, USART_RECEIVE_funcID);
	}
	return result;
}
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	ec 01       	movw	r28, r24
  a8:	68 83       	st	Y, r22
  aa:	1b 82       	std	Y+3, r1	; 0x03
  ac:	1a 86       	std	Y+10, r1	; 0x0a
  ae:	19 86       	std	Y+9, r1	; 0x09
  b0:	18 86       	std	Y+8, r1	; 0x08
  b2:	1f 82       	std	Y+7, r1	; 0x07
  b4:	1c 82       	std	Y+4, r1	; 0x04
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	8a 83       	std	Y+2, r24	; 0x02
  ba:	1e 82       	std	Y+6, r1	; 0x06
  bc:	1d 82       	std	Y+5, r1	; 0x05
  be:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <timerPTR>
  c2:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <timerPTR+0x1>
  c6:	22 81       	ldd	r18, Z+2	; 0x02
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	74 e2       	ldi	r23, 0x24	; 36
  d2:	84 ef       	ldi	r24, 0xF4	; 244
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 23 05 	call	0xa46	; 0xa46 <__udivmodsi4>
  da:	29 83       	std	Y+1, r18	; 0x01
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <drivetrainINIT>:
  e2:	fc 01       	movw	r30, r24
  e4:	60 83       	st	Z, r22
  e6:	84 e1       	ldi	r24, 0x14	; 20
  e8:	81 83       	std	Z+1, r24	; 0x01
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	82 83       	std	Z+2, r24	; 0x02
  ee:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <drivetrainPTR>
  f2:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <drivetrainPTR+0x1>
  f6:	11 96       	adiw	r26, 0x01	; 1
  f8:	8c 91       	ld	r24, X
  fa:	11 97       	sbiw	r26, 0x01	; 1
  fc:	12 96       	adiw	r26, 0x02	; 2
  fe:	6c 91       	ld	r22, X
 100:	0e 94 17 05 	call	0xa2e	; 0xa2e <__udivmodqi4>
 104:	83 83       	std	Z+3, r24	; 0x03
 106:	08 95       	ret

00000108 <setPin>:
 108:	9e ef       	ldi	r25, 0xFE	; 254
 10a:	98 0f       	add	r25, r24
 10c:	9c 30       	cpi	r25, 0x0C	; 12
 10e:	c0 f4       	brcc	.+48     	; 0x140 <setPin+0x38>
 110:	9a b1       	in	r25, 0x0a	; 10
 112:	e8 2f       	mov	r30, r24
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	32 97       	sbiw	r30, 0x02	; 2
 118:	26 2f       	mov	r18, r22
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	0e 2e       	mov	r0, r30
 11e:	02 c0       	rjmp	.+4      	; 0x124 <setPin+0x1c>
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <setPin+0x18>
 128:	29 2b       	or	r18, r25
 12a:	2a b9       	out	0x0a, r18	; 10
 12c:	9b b1       	in	r25, 0x0b	; 11
 12e:	24 2f       	mov	r18, r20
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <setPin+0x30>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	ea 95       	dec	r30
 13a:	e2 f7       	brpl	.-8      	; 0x134 <setPin+0x2c>
 13c:	29 2b       	or	r18, r25
 13e:	2b b9       	out	0x0b, r18	; 11
 140:	92 ef       	ldi	r25, 0xF2	; 242
 142:	98 0f       	add	r25, r24
 144:	96 30       	cpi	r25, 0x06	; 6
 146:	c0 f4       	brcc	.+48     	; 0x178 <setPin+0x70>
 148:	94 b1       	in	r25, 0x04	; 4
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	3e 97       	sbiw	r30, 0x0e	; 14
 150:	26 2f       	mov	r18, r22
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	0e 2e       	mov	r0, r30
 156:	02 c0       	rjmp	.+4      	; 0x15c <setPin+0x54>
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <setPin+0x50>
 160:	29 2b       	or	r18, r25
 162:	24 b9       	out	0x04, r18	; 4
 164:	95 b1       	in	r25, 0x05	; 5
 166:	24 2f       	mov	r18, r20
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <setPin+0x68>
 16c:	22 0f       	add	r18, r18
 16e:	33 1f       	adc	r19, r19
 170:	ea 95       	dec	r30
 172:	e2 f7       	brpl	.-8      	; 0x16c <setPin+0x64>
 174:	29 2b       	or	r18, r25
 176:	25 b9       	out	0x05, r18	; 5
 178:	99 ee       	ldi	r25, 0xE9	; 233
 17a:	98 0f       	add	r25, r24
 17c:	96 30       	cpi	r25, 0x06	; 6
 17e:	a8 f4       	brcc	.+42     	; 0x1aa <setPin+0xa2>
 180:	27 b1       	in	r18, 0x07	; 7
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	47 97       	sbiw	r24, 0x17	; 23
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	08 2e       	mov	r0, r24
 18a:	02 c0       	rjmp	.+4      	; 0x190 <setPin+0x88>
 18c:	66 0f       	add	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <setPin+0x84>
 194:	62 2b       	or	r22, r18
 196:	67 b9       	out	0x07, r22	; 7
 198:	98 b1       	in	r25, 0x08	; 8
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <setPin+0x9a>
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	8a 95       	dec	r24
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <setPin+0x96>
 1a6:	49 2b       	or	r20, r25
 1a8:	48 b9       	out	0x08, r20	; 8
 1aa:	08 95       	ret

000001ac <ADConverterINIT>:
 1ac:	fc 01       	movw	r30, r24
 1ae:	60 83       	st	Z, r22
 1b0:	61 83       	std	Z+1, r22	; 0x01
 1b2:	13 82       	std	Z+3, r1	; 0x03
 1b4:	12 82       	std	Z+2, r1	; 0x02
 1b6:	87 e1       	ldi	r24, 0x17	; 23
 1b8:	86 0f       	add	r24, r22
 1ba:	84 83       	std	Z+4, r24	; 0x04
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 1c4:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ISR_ADC>
 1c8:	ea e7       	ldi	r30, 0x7A	; 122
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 68       	ori	r24, 0x80	; 128
 1d0:	80 83       	st	Z, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	80 83       	st	Z, r24
 1d6:	80 81       	ld	r24, Z
 1d8:	80 83       	st	Z, r24
 1da:	80 81       	ld	r24, Z
 1dc:	80 61       	ori	r24, 0x10	; 16
 1de:	80 83       	st	Z, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	88 60       	ori	r24, 0x08	; 8
 1e4:	80 83       	st	Z, r24
 1e6:	80 81       	ld	r24, Z
 1e8:	87 60       	ori	r24, 0x07	; 7
 1ea:	80 83       	st	Z, r24
 1ec:	08 95       	ret

000001ee <encoderINIT>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	68 83       	st	Y, r22
 1f6:	1d 82       	std	Y+5, r1	; 0x05
 1f8:	1c 82       	std	Y+4, r1	; 0x04
 1fa:	1b 82       	std	Y+3, r1	; 0x03
 1fc:	1a 82       	std	Y+2, r1	; 0x02
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	88 87       	std	Y+8, r24	; 0x08
 202:	85 e0       	ldi	r24, 0x05	; 5
 204:	89 87       	std	Y+9, r24	; 0x09
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	89 85       	ldd	r24, Y+9	; 0x09
 216:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <hbDriverINIT>:
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
 226:	68 83       	st	Y, r22
 228:	8b e0       	ldi	r24, 0x0B	; 11
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	8b 83       	std	Y+3, r24	; 0x03
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	8a 83       	std	Y+2, r24	; 0x02
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	8c 83       	std	Y+4, r24	; 0x04
 238:	8d e0       	ldi	r24, 0x0D	; 13
 23a:	8d 83       	std	Y+5, r24	; 0x05
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	8b e0       	ldi	r24, 0x0B	; 11
 242:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	8a 81       	ldd	r24, Y+2	; 0x02
 256:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	8c 81       	ldd	r24, Y+4	; 0x04
 260:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	8d 81       	ldd	r24, Y+5	; 0x05
 26a:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <fanINIT>:
 274:	fc 01       	movw	r30, r24
 276:	60 83       	st	Z, r22
 278:	8e e0       	ldi	r24, 0x0E	; 14
 27a:	83 83       	std	Z+3, r24	; 0x03
 27c:	8e e1       	ldi	r24, 0x1E	; 30
 27e:	82 83       	std	Z+2, r24	; 0x02
 280:	82 e3       	ldi	r24, 0x32	; 50
 282:	81 83       	std	Z+1, r24	; 0x01
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	8e e0       	ldi	r24, 0x0E	; 14
 28a:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 28e:	08 95       	ret

00000290 <errorINIT>:
 290:	fc 01       	movw	r30, r24
 292:	60 83       	st	Z, r22
 294:	11 82       	std	Z+1, r1	; 0x01
 296:	8a e1       	ldi	r24, 0x1A	; 26
 298:	83 83       	std	Z+3, r24	; 0x03
 29a:	12 82       	std	Z+2, r1	; 0x02
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 2a4:	08 95       	ret

000002a6 <usartINIT>:
 2a6:	cf 93       	push	r28
 2a8:	fc 01       	movw	r30, r24
 2aa:	60 83       	st	Z, r22
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	9b e4       	ldi	r25, 0x4B	; 75
 2b0:	92 83       	std	Z+2, r25	; 0x02
 2b2:	81 83       	std	Z+1, r24	; 0x01
 2b4:	a2 e8       	ldi	r26, 0x82	; 130
 2b6:	b1 e0       	ldi	r27, 0x01	; 1
 2b8:	b4 83       	std	Z+4, r27	; 0x04
 2ba:	a3 83       	std	Z+3, r26	; 0x03
 2bc:	ce e0       	ldi	r28, 0x0E	; 14
 2be:	cc 93       	st	X, r28
 2c0:	1b 96       	adiw	r26, 0x0b	; 11
 2c2:	1c 92       	st	X, r1
 2c4:	a3 81       	ldd	r26, Z+3	; 0x03
 2c6:	b4 81       	ldd	r27, Z+4	; 0x04
 2c8:	19 96       	adiw	r26, 0x09	; 9
 2ca:	1c 92       	st	X, r1
 2cc:	a3 81       	ldd	r26, Z+3	; 0x03
 2ce:	b4 81       	ldd	r27, Z+4	; 0x04
 2d0:	1a 96       	adiw	r26, 0x0a	; 10
 2d2:	1c 92       	st	X, r1
 2d4:	ae e8       	ldi	r26, 0x8E	; 142
 2d6:	b1 e0       	ldi	r27, 0x01	; 1
 2d8:	b6 83       	std	Z+6, r27	; 0x06
 2da:	a5 83       	std	Z+5, r26	; 0x05
 2dc:	8f e0       	ldi	r24, 0x0F	; 15
 2de:	8c 93       	st	X, r24
 2e0:	1b 96       	adiw	r26, 0x0b	; 11
 2e2:	1c 92       	st	X, r1
 2e4:	a5 81       	ldd	r26, Z+5	; 0x05
 2e6:	b6 81       	ldd	r27, Z+6	; 0x06
 2e8:	19 96       	adiw	r26, 0x09	; 9
 2ea:	1c 92       	st	X, r1
 2ec:	05 80       	ldd	r0, Z+5	; 0x05
 2ee:	f6 81       	ldd	r31, Z+6	; 0x06
 2f0:	e0 2d       	mov	r30, r0
 2f2:	12 86       	std	Z+10, r1	; 0x0a
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 308:	83 e3       	ldi	r24, 0x33	; 51
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 310:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 314:	88 ed       	ldi	r24, 0xD8	; 216
 316:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 31a:	c0 93 c2 00 	sts	0x00C2, r28	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <setError>:
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	ec 01       	movw	r28, r24
 32c:	06 2f       	mov	r16, r22
 32e:	14 2f       	mov	r17, r20
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	8b 81       	ldd	r24, Y+3	; 0x03
 336:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
 33a:	09 83       	std	Y+1, r16	; 0x01
 33c:	1a 83       	std	Y+2, r17	; 0x02
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	08 95       	ret

00000348 <initialization>:
 348:	88 30       	cpi	r24, 0x08	; 8
 34a:	09 f4       	brne	.+2      	; 0x34e <initialization+0x6>
 34c:	5f c0       	rjmp	.+190    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 34e:	80 f4       	brcc	.+32     	; 0x370 <initialization+0x28>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	c1 f1       	breq	.+112    	; 0x3c4 <initialization+0x7c>
 354:	28 f4       	brcc	.+10     	; 0x360 <initialization+0x18>
 356:	88 23       	and	r24, r24
 358:	e9 f0       	breq	.+58     	; 0x394 <initialization+0x4c>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	19 f1       	breq	.+70     	; 0x3a4 <initialization+0x5c>
 35e:	d7 c0       	rjmp	.+430    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 360:	86 30       	cpi	r24, 0x06	; 6
 362:	09 f4       	brne	.+2      	; 0x366 <initialization+0x1e>
 364:	73 c0       	rjmp	.+230    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 366:	08 f0       	brcs	.+2      	; 0x36a <initialization+0x22>
 368:	45 c0       	rjmp	.+138    	; 0x3f4 <initialization+0xac>
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	19 f1       	breq	.+70     	; 0x3b4 <initialization+0x6c>
 36e:	cf c0       	rjmp	.+414    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 370:	8b 30       	cpi	r24, 0x0B	; 11
 372:	09 f4       	brne	.+2      	; 0x376 <initialization+0x2e>
 374:	63 c0       	rjmp	.+198    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 376:	38 f4       	brcc	.+14     	; 0x386 <initialization+0x3e>
 378:	89 30       	cpi	r24, 0x09	; 9
 37a:	09 f4       	brne	.+2      	; 0x37e <initialization+0x36>
 37c:	4f c0       	rjmp	.+158    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 37e:	8a 30       	cpi	r24, 0x0A	; 10
 380:	09 f4       	brne	.+2      	; 0x384 <initialization+0x3c>
 382:	54 c0       	rjmp	.+168    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 384:	c4 c0       	rjmp	.+392    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 386:	8d 30       	cpi	r24, 0x0D	; 13
 388:	69 f1       	breq	.+90     	; 0x3e4 <initialization+0x9c>
 38a:	20 f1       	brcs	.+72     	; 0x3d4 <initialization+0x8c>
 38c:	8f 3f       	cpi	r24, 0xFF	; 255
 38e:	09 f4       	brne	.+2      	; 0x392 <initialization+0x4a>
 390:	65 c0       	rjmp	.+202    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 392:	bd c0       	rjmp	.+378    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <currentPTR>
 39a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <currentPTR+0x1>
 39e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <ADConverterINIT>
 3a2:	08 95       	ret
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tempHBridgeAPTR>
 3aa:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <tempHBridgeAPTR+0x1>
 3ae:	0e 94 d6 00 	call	0x1ac	; 0x1ac <ADConverterINIT>
 3b2:	08 95       	ret
 3b4:	63 e0       	ldi	r22, 0x03	; 3
 3b6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tempHBridgeBPTR>
 3ba:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <tempHBridgeBPTR+0x1>
 3be:	0e 94 d6 00 	call	0x1ac	; 0x1ac <ADConverterINIT>
 3c2:	08 95       	ret
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tempMotorPTR>
 3ca:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <tempMotorPTR+0x1>
 3ce:	0e 94 d6 00 	call	0x1ac	; 0x1ac <ADConverterINIT>
 3d2:	08 95       	ret
 3d4:	6c e0       	ldi	r22, 0x0C	; 12
 3d6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <timerPTR>
 3da:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <timerPTR+0x1>
 3de:	0e 94 51 00 	call	0xa2	; 0xa2 <timerINIT>
 3e2:	08 95       	ret
 3e4:	6d e0       	ldi	r22, 0x0D	; 13
 3e6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <drivetrainPTR>
 3ea:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <drivetrainPTR+0x1>
 3ee:	0e 94 71 00 	call	0xe2	; 0xe2 <drivetrainINIT>
 3f2:	08 95       	ret
 3f4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <pidPTR>
 3f8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <pidPTR+0x1>
 3fc:	87 e0       	ldi	r24, 0x07	; 7
 3fe:	80 83       	st	Z, r24
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	81 83       	std	Z+1, r24	; 0x01
 404:	12 82       	std	Z+2, r1	; 0x02
 406:	13 82       	std	Z+3, r1	; 0x03
 408:	84 83       	std	Z+4, r24	; 0x04
 40a:	08 95       	ret
 40c:	68 e0       	ldi	r22, 0x08	; 8
 40e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <encoderPTR>
 412:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <encoderPTR+0x1>
 416:	0e 94 f7 00 	call	0x1ee	; 0x1ee <encoderINIT>
 41a:	08 95       	ret
 41c:	69 e0       	ldi	r22, 0x09	; 9
 41e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <hbDriverPTR>
 422:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <hbDriverPTR+0x1>
 426:	0e 94 10 01 	call	0x220	; 0x220 <hbDriverINIT>
 42a:	08 95       	ret
 42c:	6a e0       	ldi	r22, 0x0A	; 10
 42e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <fanPTR>
 432:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <fanPTR+0x1>
 436:	0e 94 3a 01 	call	0x274	; 0x274 <fanINIT>
 43a:	08 95       	ret
 43c:	6b e0       	ldi	r22, 0x0B	; 11
 43e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <errorSignalPTR>
 442:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <errorSignalPTR+0x1>
 446:	0e 94 48 01 	call	0x290	; 0x290 <errorINIT>
 44a:	08 95       	ret
 44c:	66 e0       	ldi	r22, 0x06	; 6
 44e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 452:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 456:	0e 94 53 01 	call	0x2a6	; 0x2a6 <usartINIT>
 45a:	08 95       	ret
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <currentPTR>
 462:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <currentPTR+0x1>
 466:	0e 94 d6 00 	call	0x1ac	; 0x1ac <ADConverterINIT>
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <tempHBridgeAPTR>
 470:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <tempHBridgeAPTR+0x1>
 474:	0e 94 d6 00 	call	0x1ac	; 0x1ac <ADConverterINIT>
 478:	63 e0       	ldi	r22, 0x03	; 3
 47a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tempHBridgeBPTR>
 47e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <tempHBridgeBPTR+0x1>
 482:	0e 94 d6 00 	call	0x1ac	; 0x1ac <ADConverterINIT>
 486:	62 e0       	ldi	r22, 0x02	; 2
 488:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tempMotorPTR>
 48c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <tempMotorPTR+0x1>
 490:	0e 94 d6 00 	call	0x1ac	; 0x1ac <ADConverterINIT>
 494:	6c e0       	ldi	r22, 0x0C	; 12
 496:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <timerPTR>
 49a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <timerPTR+0x1>
 49e:	0e 94 51 00 	call	0xa2	; 0xa2 <timerINIT>
 4a2:	6d e0       	ldi	r22, 0x0D	; 13
 4a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <drivetrainPTR>
 4a8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <drivetrainPTR+0x1>
 4ac:	0e 94 71 00 	call	0xe2	; 0xe2 <drivetrainINIT>
 4b0:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <pidPTR>
 4b4:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <pidPTR+0x1>
 4b8:	87 e0       	ldi	r24, 0x07	; 7
 4ba:	80 83       	st	Z, r24
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	81 83       	std	Z+1, r24	; 0x01
 4c0:	12 82       	std	Z+2, r1	; 0x02
 4c2:	13 82       	std	Z+3, r1	; 0x03
 4c4:	84 83       	std	Z+4, r24	; 0x04
 4c6:	68 e0       	ldi	r22, 0x08	; 8
 4c8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <encoderPTR>
 4cc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <encoderPTR+0x1>
 4d0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <encoderINIT>
 4d4:	69 e0       	ldi	r22, 0x09	; 9
 4d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <hbDriverPTR>
 4da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <hbDriverPTR+0x1>
 4de:	0e 94 10 01 	call	0x220	; 0x220 <hbDriverINIT>
 4e2:	6a e0       	ldi	r22, 0x0A	; 10
 4e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <fanPTR>
 4e8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <fanPTR+0x1>
 4ec:	0e 94 3a 01 	call	0x274	; 0x274 <fanINIT>
 4f0:	6b e0       	ldi	r22, 0x0B	; 11
 4f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <errorSignalPTR>
 4f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <errorSignalPTR+0x1>
 4fa:	0e 94 48 01 	call	0x290	; 0x290 <errorINIT>
 4fe:	66 e0       	ldi	r22, 0x06	; 6
 500:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 504:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 508:	0e 94 53 01 	call	0x2a6	; 0x2a6 <usartINIT>
 50c:	08 95       	ret
 50e:	6b e0       	ldi	r22, 0x0B	; 11
 510:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <errorSignalPTR>
 514:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <errorSignalPTR+0x1>
 518:	0e 94 48 01 	call	0x290	; 0x290 <errorINIT>
 51c:	4e ef       	ldi	r20, 0xFE	; 254
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <errorSignalPTR>
 524:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <errorSignalPTR+0x1>
 528:	0e 94 91 01 	call	0x322	; 0x322 <setError>
 52c:	08 95       	ret

0000052e <adcStrart>:
 52e:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <ISR_ADC>
 532:	22 23       	and	r18, r18
 534:	49 f0       	breq	.+18     	; 0x548 <adcStrart+0x1a>
 536:	4c ef       	ldi	r20, 0xFC	; 252
 538:	62 e0       	ldi	r22, 0x02	; 2
 53a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <errorSignalPTR>
 53e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <errorSignalPTR+0x1>
 542:	0e 94 91 01 	call	0x322	; 0x322 <setError>
 546:	08 95       	ret
 548:	dc 01       	movw	r26, r24
 54a:	11 96       	adiw	r26, 0x01	; 1
 54c:	2c 91       	ld	r18, X
 54e:	11 97       	sbiw	r26, 0x01	; 1
 550:	25 30       	cpi	r18, 0x05	; 5
 552:	b8 f4       	brcc	.+46     	; 0x582 <adcStrart+0x54>
 554:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 558:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 55c:	ec e7       	ldi	r30, 0x7C	; 124
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	20 81       	ld	r18, Z
 562:	20 68       	ori	r18, 0x80	; 128
 564:	20 83       	st	Z, r18
 566:	20 81       	ld	r18, Z
 568:	20 62       	ori	r18, 0x20	; 32
 56a:	20 83       	st	Z, r18
 56c:	20 81       	ld	r18, Z
 56e:	11 96       	adiw	r26, 0x01	; 1
 570:	8c 91       	ld	r24, X
 572:	82 2b       	or	r24, r18
 574:	80 83       	st	Z, r24
 576:	ea e7       	ldi	r30, 0x7A	; 122
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	80 64       	ori	r24, 0x40	; 64
 57e:	80 83       	st	Z, r24
 580:	08 95       	ret
 582:	4c ef       	ldi	r20, 0xFC	; 252
 584:	63 e0       	ldi	r22, 0x03	; 3
 586:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <errorSignalPTR>
 58a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <errorSignalPTR+0x1>
 58e:	0e 94 91 01 	call	0x322	; 0x322 <setError>
 592:	08 95       	ret

00000594 <adcPoll>:
 594:	fc 01       	movw	r30, r24
 596:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <ISR_ADC>
 59a:	99 23       	and	r25, r25
 59c:	41 f0       	breq	.+16     	; 0x5ae <adcPoll+0x1a>
 59e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 5a2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 5a6:	93 83       	std	Z+3, r25	; 0x03
 5a8:	82 83       	std	Z+2, r24	; 0x02
 5aa:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ISR_ADC>
 5ae:	08 95       	ret

000005b0 <usartSend>:
 5b0:	dc 01       	movw	r26, r24
 5b2:	15 96       	adiw	r26, 0x05	; 5
 5b4:	ed 91       	ld	r30, X+
 5b6:	fc 91       	ld	r31, X
 5b8:	16 97       	sbiw	r26, 0x06	; 6
 5ba:	83 85       	ldd	r24, Z+11	; 0x0b
 5bc:	88 30       	cpi	r24, 0x08	; 8
 5be:	b8 f4       	brcc	.+46     	; 0x5ee <usartSend+0x3e>
 5c0:	81 85       	ldd	r24, Z+9	; 0x09
 5c2:	e8 0f       	add	r30, r24
 5c4:	f1 1d       	adc	r31, r1
 5c6:	61 83       	std	Z+1, r22	; 0x01
 5c8:	15 96       	adiw	r26, 0x05	; 5
 5ca:	ed 91       	ld	r30, X+
 5cc:	fc 91       	ld	r31, X
 5ce:	16 97       	sbiw	r26, 0x06	; 6
 5d0:	83 85       	ldd	r24, Z+11	; 0x0b
 5d2:	8f 5f       	subi	r24, 0xFF	; 255
 5d4:	83 87       	std	Z+11, r24	; 0x0b
 5d6:	15 96       	adiw	r26, 0x05	; 5
 5d8:	ed 91       	ld	r30, X+
 5da:	fc 91       	ld	r31, X
 5dc:	16 97       	sbiw	r26, 0x06	; 6
 5de:	81 85       	ldd	r24, Z+9	; 0x09
 5e0:	87 30       	cpi	r24, 0x07	; 7
 5e2:	18 f4       	brcc	.+6      	; 0x5ea <usartSend+0x3a>
 5e4:	8f 5f       	subi	r24, 0xFF	; 255
 5e6:	81 87       	std	Z+9, r24	; 0x09
 5e8:	08 95       	ret
 5ea:	11 86       	std	Z+9, r1	; 0x09
 5ec:	08 95       	ret
 5ee:	4b ef       	ldi	r20, 0xFB	; 251
 5f0:	64 e0       	ldi	r22, 0x04	; 4
 5f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <errorSignalPTR>
 5f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <errorSignalPTR+0x1>
 5fa:	0e 94 91 01 	call	0x322	; 0x322 <setError>
 5fe:	08 95       	ret

00000600 <usartCycleTX>:
 600:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <ISR_USARTTX>
 604:	22 23       	and	r18, r18
 606:	e1 f0       	breq	.+56     	; 0x640 <usartCycleTX+0x40>
 608:	dc 01       	movw	r26, r24
 60a:	15 96       	adiw	r26, 0x05	; 5
 60c:	ed 91       	ld	r30, X+
 60e:	fc 91       	ld	r31, X
 610:	16 97       	sbiw	r26, 0x06	; 6
 612:	23 85       	ldd	r18, Z+11	; 0x0b
 614:	22 23       	and	r18, r18
 616:	a1 f0       	breq	.+40     	; 0x640 <usartCycleTX+0x40>
 618:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ISR_USARTTX>
 61c:	22 85       	ldd	r18, Z+10	; 0x0a
 61e:	e2 0f       	add	r30, r18
 620:	f1 1d       	adc	r31, r1
 622:	21 81       	ldd	r18, Z+1	; 0x01
 624:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 628:	15 96       	adiw	r26, 0x05	; 5
 62a:	ed 91       	ld	r30, X+
 62c:	fc 91       	ld	r31, X
 62e:	16 97       	sbiw	r26, 0x06	; 6
 630:	82 85       	ldd	r24, Z+10	; 0x0a
 632:	87 30       	cpi	r24, 0x07	; 7
 634:	18 f4       	brcc	.+6      	; 0x63c <usartCycleTX+0x3c>
 636:	8f 5f       	subi	r24, 0xFF	; 255
 638:	82 87       	std	Z+10, r24	; 0x0a
 63a:	08 95       	ret
 63c:	12 86       	std	Z+10, r1	; 0x0a
 63e:	08 95       	ret
 640:	4a ef       	ldi	r20, 0xFA	; 250
 642:	65 e0       	ldi	r22, 0x05	; 5
 644:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <errorSignalPTR>
 648:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <errorSignalPTR+0x1>
 64c:	0e 94 91 01 	call	0x322	; 0x322 <setError>
 650:	08 95       	ret

00000652 <usartCycleRX>:
void usartCycleRX(struct USART *usart){
	if(usart->rxBufferPTR->dataAmount<USART_BUFFER_SIZE){						// Check if RX buffer is not full
 652:	dc 01       	movw	r26, r24
 654:	13 96       	adiw	r26, 0x03	; 3
 656:	ed 91       	ld	r30, X+
 658:	fc 91       	ld	r31, X
 65a:	14 97       	sbiw	r26, 0x04	; 4
 65c:	23 85       	ldd	r18, Z+11	; 0x0b
 65e:	28 30       	cpi	r18, 0x08	; 8
 660:	a0 f4       	brcc	.+40     	; 0x68a <usartCycleRX+0x38>
		usart->rxBufferPTR->data[usart->rxBufferPTR->inputPosition] = UDR0;		// Add data to RX buffer
 662:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 666:	31 85       	ldd	r19, Z+9	; 0x09
 668:	e3 0f       	add	r30, r19
 66a:	f1 1d       	adc	r31, r1
 66c:	21 83       	std	Z+1, r18	; 0x01
		if(usart->rxBufferPTR->inputPosition<(USART_BUFFER_SIZE-1)){			// Check if end of buffer
 66e:	13 96       	adiw	r26, 0x03	; 3
 670:	ed 91       	ld	r30, X+
 672:	fc 91       	ld	r31, X
 674:	14 97       	sbiw	r26, 0x04	; 4
 676:	81 85       	ldd	r24, Z+9	; 0x09
 678:	87 30       	cpi	r24, 0x07	; 7
 67a:	18 f4       	brcc	.+6      	; 0x682 <usartCycleRX+0x30>
			usart->rxBufferPTR->inputPosition ++;								// Increment RX input position
 67c:	8f 5f       	subi	r24, 0xFF	; 255
 67e:	81 87       	std	Z+9, r24	; 0x09
 680:	01 c0       	rjmp	.+2      	; 0x684 <usartCycleRX+0x32>
		}else{																	//
			usart->rxBufferPTR->inputPosition  = 0;								// Back to beginning of buffer
 682:	11 86       	std	Z+9, r1	; 0x09
		}
		ISR_USARTRX = 0;														// Flag new data can be received
 684:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ISR_USARTRX>
 688:	08 95       	ret
	}else{
		setError(errorSignalPTR, ERROR_USART_RX_BUFFER_FULL, USART_CYCLE_RX_funcID);
 68a:	49 ef       	ldi	r20, 0xF9	; 249
 68c:	66 e0       	ldi	r22, 0x06	; 6
 68e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <errorSignalPTR>
 692:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <errorSignalPTR+0x1>
 696:	0e 94 91 01 	call	0x322	; 0x322 <setError>
 69a:	08 95       	ret

0000069c <main>:
int main(void){

////////////////////////////// SETUP //////////////////////////////////////////////
	
	//********** Structures Initialization **********
	initialization(ALL);
 69c:	8f ef       	ldi	r24, 0xFF	; 255
 69e:	0e 94 a4 01 	call	0x348	; 0x348 <initialization>
	//********************
	
	//********** Pins configuration **********
	setPin(RESET, INPUT, PULLUP);
 6a2:	41 e0       	ldi	r20, 0x01	; 1
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
	setPin(CHIP_SELECT, OUTPUT, LOW);
 6ac:	40 e0       	ldi	r20, 0x00	; 0
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	8f e0       	ldi	r24, 0x0F	; 15
 6b2:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
	setPin(SS, INPUT, NO_PULLUP);
 6b6:	40 e0       	ldi	r20, 0x00	; 0
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	80 e1       	ldi	r24, 0x10	; 16
 6bc:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
	setPin(MOSI, OUTPUT, LOW);
 6c0:	40 e0       	ldi	r20, 0x00	; 0
 6c2:	61 e0       	ldi	r22, 0x01	; 1
 6c4:	81 e1       	ldi	r24, 0x11	; 17
 6c6:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
	setPin(MISO, INPUT, NO_PULLUP);
 6ca:	40 e0       	ldi	r20, 0x00	; 0
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	82 e1       	ldi	r24, 0x12	; 18
 6d0:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
	setPin(SCK, OUTPUT, LOW);
 6d4:	40 e0       	ldi	r20, 0x00	; 0
 6d6:	61 e0       	ldi	r22, 0x01	; 1
 6d8:	83 e1       	ldi	r24, 0x13	; 19
 6da:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
	setPin(CAN_INTERRUPT, INPUT, NO_PULLUP);
 6de:	40 e0       	ldi	r20, 0x00	; 0
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	86 e0       	ldi	r24, 0x06	; 6
 6e4:	0e 94 84 00 	call	0x108	; 0x108 <setPin>
	//initTimer();									// Initialize time keeping timer
	//
	//********************
	
	//********** Global interrupts **********
	sei();											// Enable Global Interrupts
 6e8:	78 94       	sei
	//********************
////////////////////////////// END SETUP //////////////////////////////////////////
	
	while(1){
		adcStrart(currentPTR);
 6ea:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <currentPTR>
 6ee:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <currentPTR+0x1>
 6f2:	0e 94 97 02 	call	0x52e	; 0x52e <adcStrart>
		usartSend(usartPTR, (channelInUsePTR->result)>>8);
 6f6:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__data_end>
 6fa:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__data_end+0x1>
 6fe:	63 81       	ldd	r22, Z+3	; 0x03
 700:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 704:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 708:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <usartSend>
		//calculateFrequency(encoderPTR, timerPTR);
		
		//********** ISR flags polling **********
		if(ISR_USARTRX){
 70c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <ISR_USARTRX>
 710:	88 23       	and	r24, r24
 712:	31 f0       	breq	.+12     	; 0x720 <main+0x84>
			usartCycleTX(usartPTR);					// Transmit data in TX buffer
 714:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 718:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 71c:	0e 94 00 03 	call	0x600	; 0x600 <usartCycleTX>
		}
		if(ISR_USARTRX){
 720:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <ISR_USARTRX>
 724:	88 23       	and	r24, r24
 726:	31 f0       	breq	.+12     	; 0x734 <main+0x98>
			usartCycleRX(usartPTR);					// Store data in RX buffer
 728:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 72c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 730:	0e 94 29 03 	call	0x652	; 0x652 <usartCycleRX>
		}
		if(ISR_ADC){
 734:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ISR_ADC>
 738:	88 23       	and	r24, r24
 73a:	b9 f2       	breq	.-82     	; 0x6ea <main+0x4e>
			adcPoll(channelInUsePTR);				// Check if a new AD conversion is available
 73c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 740:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 744:	0e 94 ca 02 	call	0x594	; 0x594 <adcPoll>
 748:	d0 cf       	rjmp	.-96     	; 0x6ea <main+0x4e>

0000074a <__vector_1>:
	}
}
////////////////////////////// END FUNCTIONS DEFINITIONS //////////////////////////

////////////////////////////// ISRs ///////////////////////////////////////////////
ISR(INT0_vect){										// External Interrupt Request 0
 74a:	1f 92       	push	r1
 74c:	0f 92       	push	r0
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	0f 92       	push	r0
 752:	11 24       	eor	r1, r1
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	ef 93       	push	r30
 75a:	ff 93       	push	r31
	encoderPTR->CHAPulseCounter++;
 75c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <encoderPTR>
 760:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <encoderPTR+0x1>
 764:	82 85       	ldd	r24, Z+10	; 0x0a
 766:	93 85       	ldd	r25, Z+11	; 0x0b
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	93 87       	std	Z+11, r25	; 0x0b
 76c:	82 87       	std	Z+10, r24	; 0x0a
}
 76e:	ff 91       	pop	r31
 770:	ef 91       	pop	r30
 772:	9f 91       	pop	r25
 774:	8f 91       	pop	r24
 776:	0f 90       	pop	r0
 778:	0f be       	out	0x3f, r0	; 63
 77a:	0f 90       	pop	r0
 77c:	1f 90       	pop	r1
 77e:	18 95       	reti

00000780 <__vector_2>:
ISR(INT1_vect){										// External Interrupt Request 1
 780:	1f 92       	push	r1
 782:	0f 92       	push	r0
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	0f 92       	push	r0
 788:	11 24       	eor	r1, r1
 78a:	8f 93       	push	r24
 78c:	9f 93       	push	r25
 78e:	ef 93       	push	r30
 790:	ff 93       	push	r31
	encoderPTR->CHBPulseCounter++;
 792:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <encoderPTR>
 796:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <encoderPTR+0x1>
 79a:	84 85       	ldd	r24, Z+12	; 0x0c
 79c:	95 85       	ldd	r25, Z+13	; 0x0d
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	95 87       	std	Z+13, r25	; 0x0d
 7a2:	84 87       	std	Z+12, r24	; 0x0c
}
 7a4:	ff 91       	pop	r31
 7a6:	ef 91       	pop	r30
 7a8:	9f 91       	pop	r25
 7aa:	8f 91       	pop	r24
 7ac:	0f 90       	pop	r0
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	0f 90       	pop	r0
 7b2:	1f 90       	pop	r1
 7b4:	18 95       	reti

000007b6 <__vector_3>:
ISR(PCINT0_vect){									// Pin Change Interrupt Request 0
 7b6:	1f 92       	push	r1
 7b8:	0f 92       	push	r0
 7ba:	0f b6       	in	r0, 0x3f	; 63
 7bc:	0f 92       	push	r0
 7be:	11 24       	eor	r1, r1
	ISR_PCINT0 = 0;
 7c0:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <ISR_PCINT0>
}
 7c4:	0f 90       	pop	r0
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	0f 90       	pop	r0
 7ca:	1f 90       	pop	r1
 7cc:	18 95       	reti

000007ce <__vector_4>:
ISR(PCINT1_vect){									// Pin Change Interrupt Request 1
 7ce:	1f 92       	push	r1
 7d0:	0f 92       	push	r0
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	0f 92       	push	r0
 7d6:	11 24       	eor	r1, r1
	ISR_PCINT1 = 0;
 7d8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <ISR_PCINT1>
}
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <__vector_5>:
ISR(PCINT2_vect){									// Pin Change Interrupt Request 2
 7e6:	1f 92       	push	r1
 7e8:	0f 92       	push	r0
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	0f 92       	push	r0
 7ee:	11 24       	eor	r1, r1
	ISR_PCINT2 = 0;
 7f0:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <ISR_PCINT2>
}
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <__vector_6>:
ISR(WDT_vect){										// Watchdog Time-out Interrupt
 7fe:	1f 92       	push	r1
 800:	0f 92       	push	r0
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	0f 92       	push	r0
 806:	11 24       	eor	r1, r1
	ISR_WDT = 0;
 808:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <ISR_WDT>
}
 80c:	0f 90       	pop	r0
 80e:	0f be       	out	0x3f, r0	; 63
 810:	0f 90       	pop	r0
 812:	1f 90       	pop	r1
 814:	18 95       	reti

00000816 <__vector_7>:
ISR(TIMER2_COMPA_vect){								// Timer/Counter 2 Compare Match A
 816:	1f 92       	push	r1
 818:	0f 92       	push	r0
 81a:	0f b6       	in	r0, 0x3f	; 63
 81c:	0f 92       	push	r0
 81e:	11 24       	eor	r1, r1
	ISR_TMR2CA = 0;
 820:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <ISR_TMR2CA>
}
 824:	0f 90       	pop	r0
 826:	0f be       	out	0x3f, r0	; 63
 828:	0f 90       	pop	r0
 82a:	1f 90       	pop	r1
 82c:	18 95       	reti

0000082e <__vector_8>:
ISR(TIMER2_COMPB_vect){								// Timer/Counter 2 Compare Match B
 82e:	1f 92       	push	r1
 830:	0f 92       	push	r0
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	0f 92       	push	r0
 836:	11 24       	eor	r1, r1
	ISR_TMR2CB = 0;
 838:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <ISR_TMR2CB>
}
 83c:	0f 90       	pop	r0
 83e:	0f be       	out	0x3f, r0	; 63
 840:	0f 90       	pop	r0
 842:	1f 90       	pop	r1
 844:	18 95       	reti

00000846 <__vector_9>:
ISR(TIMER2_OVF_vect){								// Timer/Counter 2 Overflow
 846:	1f 92       	push	r1
 848:	0f 92       	push	r0
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	0f 92       	push	r0
 84e:	11 24       	eor	r1, r1
	ISR_TMR2OVF = 0;
 850:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ISR_TMR2OVF>
}
 854:	0f 90       	pop	r0
 856:	0f be       	out	0x3f, r0	; 63
 858:	0f 90       	pop	r0
 85a:	1f 90       	pop	r1
 85c:	18 95       	reti

0000085e <__vector_10>:
ISR(TIMER1_CAPT_vect){								// Timer/Counter 1 Capture Event
 85e:	1f 92       	push	r1
 860:	0f 92       	push	r0
 862:	0f b6       	in	r0, 0x3f	; 63
 864:	0f 92       	push	r0
 866:	11 24       	eor	r1, r1
	ISR_TMR1CAPT = 0;
 868:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <ISR_TMR1CAPT>
}
 86c:	0f 90       	pop	r0
 86e:	0f be       	out	0x3f, r0	; 63
 870:	0f 90       	pop	r0
 872:	1f 90       	pop	r1
 874:	18 95       	reti

00000876 <__vector_11>:
ISR(TIMER1_COMPA_vect){								// Timer/Counter 1 Compare Match A
 876:	1f 92       	push	r1
 878:	0f 92       	push	r0
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	0f 92       	push	r0
 87e:	11 24       	eor	r1, r1
	ISR_TMR1CA = 0;
 880:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <ISR_TMR1CA>
}
 884:	0f 90       	pop	r0
 886:	0f be       	out	0x3f, r0	; 63
 888:	0f 90       	pop	r0
 88a:	1f 90       	pop	r1
 88c:	18 95       	reti

0000088e <__vector_12>:
ISR(TIMER1_COMPB_vect){								// Timer/Counter 1 Compare Match B
 88e:	1f 92       	push	r1
 890:	0f 92       	push	r0
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	0f 92       	push	r0
 896:	11 24       	eor	r1, r1
	ISR_TMR1CB = 0;
 898:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <ISR_TMR1CB>
}
 89c:	0f 90       	pop	r0
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	0f 90       	pop	r0
 8a2:	1f 90       	pop	r1
 8a4:	18 95       	reti

000008a6 <__vector_13>:
ISR(TIMER1_OVF_vect){								// Timer/Counter 1 Overflow
 8a6:	1f 92       	push	r1
 8a8:	0f 92       	push	r0
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	0f 92       	push	r0
 8ae:	11 24       	eor	r1, r1
	ISR_TMR1OVF = 0;
 8b0:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <ISR_TMR1OVF>
}
 8b4:	0f 90       	pop	r0
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	0f 90       	pop	r0
 8ba:	1f 90       	pop	r1
 8bc:	18 95       	reti

000008be <__vector_14>:
ISR(TIMER0_COMPA_vect){								// Timer/Counter 0 Compare Match A
 8be:	1f 92       	push	r1
 8c0:	0f 92       	push	r0
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	0f 92       	push	r0
 8c6:	11 24       	eor	r1, r1
	ISR_TMR0CA = 0;
 8c8:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <ISR_TMR0CA>
}
 8cc:	0f 90       	pop	r0
 8ce:	0f be       	out	0x3f, r0	; 63
 8d0:	0f 90       	pop	r0
 8d2:	1f 90       	pop	r1
 8d4:	18 95       	reti

000008d6 <__vector_15>:
ISR(TIMER0_COMPB_vect){								// Timer/Counter 0 Compare Match B
 8d6:	1f 92       	push	r1
 8d8:	0f 92       	push	r0
 8da:	0f b6       	in	r0, 0x3f	; 63
 8dc:	0f 92       	push	r0
 8de:	11 24       	eor	r1, r1
	ISR_TMR0CB = 0;
 8e0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <ISR_TMR0CB>
}
 8e4:	0f 90       	pop	r0
 8e6:	0f be       	out	0x3f, r0	; 63
 8e8:	0f 90       	pop	r0
 8ea:	1f 90       	pop	r1
 8ec:	18 95       	reti

000008ee <__vector_16>:
ISR(TIMER0_OVF_vect){								// Timer/Counter 0 Overflow
 8ee:	1f 92       	push	r1
 8f0:	0f 92       	push	r0
 8f2:	0f b6       	in	r0, 0x3f	; 63
 8f4:	0f 92       	push	r0
 8f6:	11 24       	eor	r1, r1
	ISR_TMR0OVF = 0;
 8f8:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <ISR_TMR0OVF>
}
 8fc:	0f 90       	pop	r0
 8fe:	0f be       	out	0x3f, r0	; 63
 900:	0f 90       	pop	r0
 902:	1f 90       	pop	r1
 904:	18 95       	reti

00000906 <__vector_17>:
ISR(SPI_STC_vect){									// SPI Serial Transfer Complete
 906:	1f 92       	push	r1
 908:	0f 92       	push	r0
 90a:	0f b6       	in	r0, 0x3f	; 63
 90c:	0f 92       	push	r0
 90e:	11 24       	eor	r1, r1
	ISR_SPI = 0;
 910:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <ISR_SPI>
}
 914:	0f 90       	pop	r0
 916:	0f be       	out	0x3f, r0	; 63
 918:	0f 90       	pop	r0
 91a:	1f 90       	pop	r1
 91c:	18 95       	reti

0000091e <__vector_18>:
ISR(USART_RX_vect){									// USART RX Complete
 91e:	1f 92       	push	r1
 920:	0f 92       	push	r0
 922:	0f b6       	in	r0, 0x3f	; 63
 924:	0f 92       	push	r0
 926:	11 24       	eor	r1, r1
 928:	8f 93       	push	r24
 92a:	ef 93       	push	r30
 92c:	ff 93       	push	r31
	ISR_USARTRX = 1;								// Flag complete incoming RX
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <ISR_USARTRX>
	usartPTR->rxBufferPTR->dataAmount++;			// Increase element count in RX buffer
 934:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 938:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 93c:	03 80       	ldd	r0, Z+3	; 0x03
 93e:	f4 81       	ldd	r31, Z+4	; 0x04
 940:	e0 2d       	mov	r30, r0
 942:	83 85       	ldd	r24, Z+11	; 0x0b
 944:	8f 5f       	subi	r24, 0xFF	; 255
 946:	83 87       	std	Z+11, r24	; 0x0b
}
 948:	ff 91       	pop	r31
 94a:	ef 91       	pop	r30
 94c:	8f 91       	pop	r24
 94e:	0f 90       	pop	r0
 950:	0f be       	out	0x3f, r0	; 63
 952:	0f 90       	pop	r0
 954:	1f 90       	pop	r1
 956:	18 95       	reti

00000958 <__vector_19>:
ISR(USART_UDRE_vect){								// USART Data Register Empty
 958:	1f 92       	push	r1
 95a:	0f 92       	push	r0
 95c:	0f b6       	in	r0, 0x3f	; 63
 95e:	0f 92       	push	r0
 960:	11 24       	eor	r1, r1
 962:	8f 93       	push	r24
	ISR_USARTUDRE = 1;
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ISR_USARTUDRE>
}
 96a:	8f 91       	pop	r24
 96c:	0f 90       	pop	r0
 96e:	0f be       	out	0x3f, r0	; 63
 970:	0f 90       	pop	r0
 972:	1f 90       	pop	r1
 974:	18 95       	reti

00000976 <__vector_20>:
ISR(USART_TX_vect){									// USART TX Complete
 976:	1f 92       	push	r1
 978:	0f 92       	push	r0
 97a:	0f b6       	in	r0, 0x3f	; 63
 97c:	0f 92       	push	r0
 97e:	11 24       	eor	r1, r1
 980:	8f 93       	push	r24
 982:	ef 93       	push	r30
 984:	ff 93       	push	r31
	ISR_USARTTX = 1;								// Flag complete TX
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <ISR_USARTTX>
	usartPTR->txBufferPTR->dataAmount++;			// Increase element count in RX buffer
 98c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 990:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 994:	05 80       	ldd	r0, Z+5	; 0x05
 996:	f6 81       	ldd	r31, Z+6	; 0x06
 998:	e0 2d       	mov	r30, r0
 99a:	83 85       	ldd	r24, Z+11	; 0x0b
 99c:	8f 5f       	subi	r24, 0xFF	; 255
 99e:	83 87       	std	Z+11, r24	; 0x0b
}
 9a0:	ff 91       	pop	r31
 9a2:	ef 91       	pop	r30
 9a4:	8f 91       	pop	r24
 9a6:	0f 90       	pop	r0
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	0f 90       	pop	r0
 9ac:	1f 90       	pop	r1
 9ae:	18 95       	reti

000009b0 <__vector_21>:
ISR(ADC_vect){										// ADC Conversion Complete
 9b0:	1f 92       	push	r1
 9b2:	0f 92       	push	r0
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	0f 92       	push	r0
 9b8:	11 24       	eor	r1, r1
 9ba:	8f 93       	push	r24
	ISR_ADC = 1;									
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ISR_ADC>
}
 9c2:	8f 91       	pop	r24
 9c4:	0f 90       	pop	r0
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	0f 90       	pop	r0
 9ca:	1f 90       	pop	r1
 9cc:	18 95       	reti

000009ce <__vector_22>:
ISR(EE_READY_vect){									// EEPROM Ready
 9ce:	1f 92       	push	r1
 9d0:	0f 92       	push	r0
 9d2:	0f b6       	in	r0, 0x3f	; 63
 9d4:	0f 92       	push	r0
 9d6:	11 24       	eor	r1, r1
	ISR_EEREADY = 0;
 9d8:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <ISR_EEREADY>
}
 9dc:	0f 90       	pop	r0
 9de:	0f be       	out	0x3f, r0	; 63
 9e0:	0f 90       	pop	r0
 9e2:	1f 90       	pop	r1
 9e4:	18 95       	reti

000009e6 <__vector_23>:
ISR(ANALOG_COMP_vect){								// Analog Comparator
 9e6:	1f 92       	push	r1
 9e8:	0f 92       	push	r0
 9ea:	0f b6       	in	r0, 0x3f	; 63
 9ec:	0f 92       	push	r0
 9ee:	11 24       	eor	r1, r1
	ISR_ANALOGCOMP = 0;
 9f0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <ISR_ANALOGCOMP>
}
 9f4:	0f 90       	pop	r0
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	0f 90       	pop	r0
 9fa:	1f 90       	pop	r1
 9fc:	18 95       	reti

000009fe <__vector_24>:
ISR(TWI_vect){										// 2-wire Serial Interface
 9fe:	1f 92       	push	r1
 a00:	0f 92       	push	r0
 a02:	0f b6       	in	r0, 0x3f	; 63
 a04:	0f 92       	push	r0
 a06:	11 24       	eor	r1, r1
	ISR_TWI = 0;
 a08:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <ISR_TWI>
}
 a0c:	0f 90       	pop	r0
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	0f 90       	pop	r0
 a12:	1f 90       	pop	r1
 a14:	18 95       	reti

00000a16 <__vector_25>:
ISR(SPM_READY_vect){								// Store Program Memory Ready
 a16:	1f 92       	push	r1
 a18:	0f 92       	push	r0
 a1a:	0f b6       	in	r0, 0x3f	; 63
 a1c:	0f 92       	push	r0
 a1e:	11 24       	eor	r1, r1
	ISR_SPM = 0;
 a20:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <ISR_SPM>
}
 a24:	0f 90       	pop	r0
 a26:	0f be       	out	0x3f, r0	; 63
 a28:	0f 90       	pop	r0
 a2a:	1f 90       	pop	r1
 a2c:	18 95       	reti

00000a2e <__udivmodqi4>:
 a2e:	99 1b       	sub	r25, r25
 a30:	79 e0       	ldi	r23, 0x09	; 9
 a32:	04 c0       	rjmp	.+8      	; 0xa3c <__udivmodqi4_ep>

00000a34 <__udivmodqi4_loop>:
 a34:	99 1f       	adc	r25, r25
 a36:	96 17       	cp	r25, r22
 a38:	08 f0       	brcs	.+2      	; 0xa3c <__udivmodqi4_ep>
 a3a:	96 1b       	sub	r25, r22

00000a3c <__udivmodqi4_ep>:
 a3c:	88 1f       	adc	r24, r24
 a3e:	7a 95       	dec	r23
 a40:	c9 f7       	brne	.-14     	; 0xa34 <__udivmodqi4_loop>
 a42:	80 95       	com	r24
 a44:	08 95       	ret

00000a46 <__udivmodsi4>:
 a46:	a1 e2       	ldi	r26, 0x21	; 33
 a48:	1a 2e       	mov	r1, r26
 a4a:	aa 1b       	sub	r26, r26
 a4c:	bb 1b       	sub	r27, r27
 a4e:	fd 01       	movw	r30, r26
 a50:	0d c0       	rjmp	.+26     	; 0xa6c <__udivmodsi4_ep>

00000a52 <__udivmodsi4_loop>:
 a52:	aa 1f       	adc	r26, r26
 a54:	bb 1f       	adc	r27, r27
 a56:	ee 1f       	adc	r30, r30
 a58:	ff 1f       	adc	r31, r31
 a5a:	a2 17       	cp	r26, r18
 a5c:	b3 07       	cpc	r27, r19
 a5e:	e4 07       	cpc	r30, r20
 a60:	f5 07       	cpc	r31, r21
 a62:	20 f0       	brcs	.+8      	; 0xa6c <__udivmodsi4_ep>
 a64:	a2 1b       	sub	r26, r18
 a66:	b3 0b       	sbc	r27, r19
 a68:	e4 0b       	sbc	r30, r20
 a6a:	f5 0b       	sbc	r31, r21

00000a6c <__udivmodsi4_ep>:
 a6c:	66 1f       	adc	r22, r22
 a6e:	77 1f       	adc	r23, r23
 a70:	88 1f       	adc	r24, r24
 a72:	99 1f       	adc	r25, r25
 a74:	1a 94       	dec	r1
 a76:	69 f7       	brne	.-38     	; 0xa52 <__udivmodsi4_loop>
 a78:	60 95       	com	r22
 a7a:	70 95       	com	r23
 a7c:	80 95       	com	r24
 a7e:	90 95       	com	r25
 a80:	9b 01       	movw	r18, r22
 a82:	ac 01       	movw	r20, r24
 a84:	bd 01       	movw	r22, r26
 a86:	cf 01       	movw	r24, r30
 a88:	08 95       	ret

00000a8a <_exit>:
 a8a:	f8 94       	cli

00000a8c <__stop_program>:
 a8c:	ff cf       	rjmp	.-2      	; 0xa8c <__stop_program>
